services:
  caddy:
    image: caddy:2-alpine
    container_name: eh-app-caddy
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
      - n8n

  postgres:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: eh-app-postgres
    env_file:
      - .env.infrastructure
      - .env.credentials
      - .env.third-party
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: ${RESTART_POLICY:-unless-stopped}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-event_horizon_user} -d ${POSTGRES_DB:-event_horizon_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eh-app-backend
    env_file:
      - .env.infrastructure
      - .env.credentials
      - .env.third-party
    depends_on:
      postgres:
        condition: service_healthy
    restart: ${RESTART_POLICY:-unless-stopped}

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: eh-app-frontend
    env_file:
      - .env.infrastructure
      - .env.credentials
      - .env.third-party
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: ${RESTART_POLICY:-unless-stopped}

  n8n:
    build:
      context: ./n8n
      dockerfile: Dockerfile
    container_name: n8n
    env_file:
      - .env.infrastructure
      - .env.credentials
      - .env.third-party
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_setup_data:/data
      - ./n8n/.env:/tmp/.env:ro
    depends_on:
      postgres:
        condition: service_healthy
    restart: ${RESTART_POLICY:-unless-stopped}
    stdin_open: true
    tty: true
    
  redis:
    image: redis:latest
    container_name: eh-app-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --save 60 1000
    volumes:
      - redis_data:/data
    env_file:
      - .env.generated

  discord-bot:
    build:
      context: ./discord-bot
      dockerfile: Dockerfile
    container_name: discord-bot
    env_file:
      - .env.infrastructure
      - .env.credentials
      - .env.third-party
    restart: ${RESTART_POLICY:-unless-stopped}

volumes:
  postgres_data:
  n8n_data:
  n8n_setup_data:
  redis_data:
  caddy_data:
  caddy_config: