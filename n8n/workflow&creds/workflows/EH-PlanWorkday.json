[{"createdAt":"2025-09-25T16:42:10.736Z","updatedAt":"2025-10-22T15:08:01.000Z","id":"MQMBf1LwZbZnw74e","name":"Event Horizon: Plan Workday","active":true,"isArchived":false,"nodes":[{"parameters":{"operation":"getAll","calendar":{"__rl":true,"value":"alex.retana0429@gmail.com","mode":"list"},"returnAll":true,"timeMin":"={{ $today.startOf('day') }}","timeMax":"={{ $today.endOf('day') }}","options":{}},"id":"gcal_1","name":"Get Today Events","type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[2352,-288],"alwaysOutputData":true,"credentials":{"googleCalendarOAuth2Api":{"id":"NkKUuScQIKMPg4oB","name":"Google Calendar account"}}},{"parameters":{"mode":"chooseBranch"},"id":"merge_1","name":"Merge Data","type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[3168,-288]},{"parameters":{"jsCode":"// create sessionId from Global Variables\nconst sessionId = $now\nconst workflowStaticData = $getWorkflowStaticData('global');\nworkflowStaticData.sessionId = sessionId;\n\n// Return\nreturn { enriched_tasks: $input.all(), already_scheduled: $('Repackage JSON').first().json.already_scheduled, sessionId: sessionId };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2400,160],"id":"3b157449-0bd2-4506-8d59-587283994d4f","name":"Nest Into 1 Head Key-Value JSON"},{"parameters":{"conditions":{"boolean":[{"value1":"={{ $json.body.approved }}","value2":true}]}},"id":"b0fea1a7-f0ce-41bc-b44f-9e8dc7a87312","name":"Check Approval","type":"n8n-nodes-base.if","typeVersion":1,"position":[3152,160]},{"parameters":{"resume":"webhook","httpMethod":"POST","options":{}},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2992,160],"id":"92dfa017-86bf-4bca-9212-37b7dabc680a","name":"Wait","webhookId":"96c48feb-6d78-47f2-9d4f-546089ed25b1"},{"parameters":{"method":"POST","url":"http://discord-bot:54545/approval-request","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"request_data","value":"={{ JSON.parse($json.output).schedule_proposal }}"},{"name":"resume_webhook","value":"={{ $execution.resumeUrl.replace('localhost', 'n8n') }}"}]},"options":{}},"id":"4bae5c2c-4688-433b-a61c-4b73e668d842","name":"Discord-Bot Initiate HITL","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[2832,160],"alwaysOutputData":false},{"parameters":{"content":"## 📥 Gather Calendar Events\n\nThis section retrieves the raw data needed for planning:\n- **Obsidian Tasks**: Fetches unfinished tasks from MASTER_CHECKLIST_TASKS_MONTH1.md via REST API\n- **Calendar Events**: Gets today's scheduled events from Google Calendar\n\n**Output**: Raw task list and existing calendar commitments","height":352,"width":1024,"color":5},"id":"433edb36-e273-4a1a-9cf9-cf2564a76781","name":"Input Data Collection","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2304,-480]},{"parameters":{"content":"## 📅 Schedule Planning (with Human-In-The-Loop)\n\nCreates optimized daily schedule proposals:\n- **Time Windows**: 10AM-12PM and 1PM-6PM (avoiding calendar conflicts)\n- **Work Blocks**: 1-hour increments, combining tasks ≤45min\n- **Runs Human-In-The-Loop Approval**: Takes user feedback to create new a proposal until an approval is reached.\n- **Activate Tasks**: Upon approval, sets all tasks to active\n\n**Output**: Human-readable markdown schedule proposal","height":464,"width":1184,"color":6},"id":"ef09c1c0-a5e9-49c0-9745-16958ec39328","name":"Schedule Planning","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2352,-80]},{"parameters":{"operation":"executeQuery","query":"SELECT \n  id::text AS \"Active Project Id\",\n  name AS \"Project Name\",\n  CASE WHEN status IN ('Planning Phase', 'Active') THEN true ELSE false END AS \"Active\",\n  description AS \"Description\",\n  status::text AS \"Status\",\n  COALESCE(\n    (SELECT ARRAY_AGG(g.id::text) \n     FROM goals g \n     WHERE g.project_id = p.id),\n    ARRAY[]::text[]\n  ) AS \"Goal Children\",\n  COALESCE(\n    (SELECT ARRAY_AGG(t.id::text) \n     FROM tasks t \n     JOIN goals g ON t.goal_id = g.id \n     WHERE g.project_id = p.id),\n    ARRAY[]::text[]\n  ) AS \"Task Children\"\nFROM projects p\nWHERE status IN ('Planning Phase', 'Active')\nORDER BY created_at;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2352,-832],"id":"665dbdc5-b70f-4280-a354-011e3e95a247","name":"Query Active Projects","credentials":{"postgres":{"id":"5F055CeN7hFwfSH4","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT \n  id::text AS \"Goals Id\",\n  name AS \"Goal name\",\n  project_id::text AS \"Parent Project\",\n  status::text AS \"Status\",\n  scope::text AS \"Scope\",\n  description AS \"Description\",\n  success_criteria AS \"Success Criteria\",\n  due_date::text AS \"Due Date\"\nFROM goals\nWHERE status <> 'Done'\nORDER BY created_at;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2352,-656],"id":"984eeb55-25c3-43fd-ba76-3f9e2c6d6461","name":"Query Unfinished Goals","credentials":{"postgres":{"id":"5F055CeN7hFwfSH4","name":"Postgres account"}}},{"parameters":{"jsCode":"// Extract all goal IDs from the merged data\nconst goalIds = $input.all().map(item => item.json[\"Goals Id\"]);\n\n// Remove duplicates and create a comma-separated list for SQL IN clause\nconst uniqueGoalIds = [...new Set(goalIds)];\nconst goalIdList = uniqueGoalIds.map(id => `'${id}'`).join(', ');\n\n// Return the goal IDs for the next query\nreturn [{ json: { goalIds: uniqueGoalIds, goalIdList: goalIdList } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2784,-816],"id":"dfa37814-26aa-45e2-9534-983d394c62f8","name":"Extract Goal IDs for Task Query"},{"parameters":{"operation":"executeQuery","query":"=SELECT \n  t.id::text AS \"Task Id\",\n  t.name AS \"Task name\",\n  t.description AS \"Description\",\n  t.status::text AS \"Status\",\n  t.task_type::text AS \"Task Type\",\n  t.priority::text AS \"Priority\",\n  t.effort_level::text AS \"Effort level\",\n  t.time_estimate_minutes AS \"Time Estimate\",\n  t.due_date::text AS \"Due Date\",\n  t.date_completed::text AS \"Date Completed\",\n  t.week_start_date::text AS \"Week Start Date\",\n  t.goal_id::text AS \"Goal Id\",\n  g.project_id::text AS \"Project Id\",\n  COALESCE(\n    (SELECT ARRAY_AGG(td.depends_on_task_id::text) \n     FROM task_dependencies td \n     WHERE td.task_id = t.id),\n    ARRAY[]::text[]\n  ) AS \"Dependency IDs\",\n  COALESCE(\n    (SELECT ARRAY_AGG(dep_tasks.name) \n     FROM task_dependencies td \n     JOIN tasks dep_tasks ON td.depends_on_task_id = dep_tasks.id\n     WHERE td.task_id = t.id),\n    ARRAY[]::text[]\n  ) AS \"Dependency Names\"\nFROM tasks t\nINNER JOIN goals g ON t.goal_id = g.id\nWHERE t.goal_id::text IN ({{ $json.goalIdList }})\nORDER BY t.created_at;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2976,-816],"id":"225625e9-494b-4f4d-bf7a-29e0d7efdd4f","name":"Query Tasks for Active Project Goals","credentials":{"postgres":{"id":"5F055CeN7hFwfSH4","name":"Postgres account"}}},{"parameters":{"content":"3.Inner Join Projects/Goals to get only goals of active projects\n4.Query Tasks for those goals\n5.Enrich task data with project and goal names","height":144,"width":752},"type":"n8n-nodes-base.stickyNote","position":[2576,-640],"typeVersion":1,"id":"a8d14714-9deb-4ea8-95f2-82a4412ff105","name":"Sticky Note3"},{"parameters":{"content":"## 📥 Get Tasks from PostgreSQL\n### Replaces the old Notion API workflow\n\nWorkflow:\n1. Query Active Projects (status = 'Planning Phase' or 'Active')\n2. Query Unfinished Goals (status != 'Done')\n","height":528,"width":1024},"type":"n8n-nodes-base.stickyNote","position":[2304,-1024],"typeVersion":1,"id":"57253b86-07ac-4aea-9aab-4f97a9ab072d","name":"Sticky Note1"},{"parameters":{"mode":"combine","advanced":true,"mergeByFields":{"values":[{"field1":"Active Project Id","field2":"Parent Project"}]},"options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[2592,-816],"id":"fe6d18cb-9737-4bf4-a5ea-95097da70f84","name":"Inner Join Project/Goals"},{"parameters":{"jsCode":"// Get the merged project/goal data and task data\nconst projectGoalData = $(\"Inner Join Project/Goals\").all();\nconst taskData = $input.all();\n\n// Create lookup maps for quick access\nconst projectMap = {};\nconst goalMap = {};\n\nfor (const item of projectGoalData) {\n  const projectId = item.json[\"Active Project Id\"];\n  const goalId = item.json[\"Goals Id\"];\n\n  if (projectId) {\n    projectMap[projectId] = {\n      name: item.json[\"Project Name\"],\n      status: item.json[\"Status\"],\n      active: item.json[\"Active\"]\n    };\n  }\n\n  if (goalId) {\n    goalMap[goalId] = {\n      name: item.json[\"Goal name\"],\n      projectId: item.json[\"Parent Project\"],\n      status: item.json[\"Status\"],\n      scope: item.json[\"Scope\"]\n    };\n  }\n}\n\n// Process tasks and enrich with human-readable names\nconst enrichedTasks = [];\n\nfor (const task of taskData) {\n  const goalId = task.json[\"Goal Id\"];\n  const projectId = task.json[\"Project Id\"];\n  const goal = goalMap[goalId];\n  const project = projectMap[projectId];\n\n  enrichedTasks.push({\n    json: {\n      // Task data\n      id: task.json[\"Task Id\"],\n      taskName: task.json[\"Task name\"],\n      description: task.json[\"Description\"] || \"[No Description Provided]\",\n      status: task.json[\"Status\"],\n      taskType: task.json[\"Task Type\"],\n      priority: task.json[\"Priority\"],\n      effortLevel: task.json[\"Effort level\"],\n      timeEstimate: task.json[\"Time Estimate\"],\n      dueDate: task.json[\"Due Date\"],\n      dateCompleted: task.json[\"Date Completed\"],\n      weekStartDate: task.json[\"Week Start Date\"],\n      assignee: task.json[\"Assignee\"],\n      \n      // Goal data\n      goalId: goalId,\n      goalName: goal ? goal.name : \"Unknown Goal\",\n      goalStatus: goal ? goal.status : null,\n      goalScope: goal ? goal.scope : null,\n      \n      // Project data\n      projectId: projectId,\n      projectName: project ? project.name : \"Unknown Project\",\n      projectStatus: project ? project.status : null,\n      projectActive: project ? project.active : false,\n      \n      // Dependencies\n      dependencyIds: task.json[\"Dependency IDs\"],\n      dependencyNames: task.json[\"Dependency Names\"]\n    }\n  });\n}\n\nreturn { enrichedTasks: enrichedTasks };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3168,-816],"id":"e05d62ae-069d-4137-b8b0-506643df2615","name":"Parse/Map Tasks Results"},{"parameters":{"model":"x-ai/grok-4-fast","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[2160,896],"id":"4cc4dc01-eda6-4daf-9768-1e7e2a618d20","name":"x-ai/grok-4-fast:paid","credentials":{"openRouterApi":{"id":"yKFM8WDdpoQvNP2s","name":"OpenRouter account"}}},{"parameters":{"model":"anthropic/claude-sonnet-4.5","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[2160,1056],"id":"ce1e9740-ad89-4b97-b1c3-67a6a94675a9","name":"claude-sonnet-4.5","credentials":{"openRouterApi":{"id":"yKFM8WDdpoQvNP2s","name":"OpenRouter account"}}},{"parameters":{"content":"# Human In The Loop Blocked","height":80,"width":512,"color":3},"type":"n8n-nodes-base.stickyNote","position":[2384,416],"typeVersion":1,"id":"9d28bd2a-0cf3-45bc-b268-79e06166fdee","name":"Sticky Note2"},{"parameters":{"path":"plan-workday","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[1952,-464],"id":"428dd128-56a2-476a-bf5b-5341c86e9190","name":"Webhook","webhookId":"cdade82b-49fb-42a1-997f-a7675fdd034a"},{"parameters":{"rule":{"interval":[{"triggerAtHour":8}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[1952,-624],"id":"d439cd62-4917-4967-b66e-1193b0e54f42","name":"Schedule Trigger"},{"parameters":{"options":{"reset":false}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[3312,688],"id":"6b0c5557-2d20-4869-ba5a-56a817617271","name":"Loop Over Items1"},{"parameters":{"calendar":{"__rl":true,"value":"alex.retana0429@gmail.com","mode":"list","cachedResultName":"alex.retana0429@gmail.com"},"start":"={{ $json.startTime }}","end":"={{ $json.endTime }}","useDefaultReminders":false,"additionalFields":{"description":"={{ $json.description }}\n{{ $json.workblock_as_html }}","summary":"={{ $json.title }}"},"remindersUi":{"remindersValues":[{"method":"popup","minutes":10}]}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[3520,704],"id":"9303a337-00b0-4a71-b7aa-5ce3c878dee4","name":"Create an event1","credentials":{"googleCalendarOAuth2Api":{"id":"NkKUuScQIKMPg4oB","name":"Google Calendar account"}}},{"parameters":{"jsCode":"return $input.first().json.json.email_data"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3136,912],"id":"618e5d8b-4272-4547-a03e-2a3dd0642529","name":"Code in JavaScript1"},{"parameters":{"content":"## 📚📩 Informative Assistant Scheduler Agent\n\n- Consults the Archivist Agent using a sub workflow tool. It retrieves relevant background context for the tasks included in each work block\n- Creates the items that will loop through the calendar event creation loop\n- Composes Daily Preper Email and send it","height":544,"width":1232,"color":4},"id":"2d83a44f-fd23-471d-a306-d45138e2fbf3","name":"Schedule Execution1","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2448,528]},{"parameters":{"promptType":"define","text":"={{ $input.all() }}","needsFallback":true,"options":{"systemMessage":"# Informative Assistant Scheduler Agent\n\n## Role\n\nYou are an AI assistant responsible for transforming approved human-readable schedule proposals into structured calendar entries and contextual email briefings. You coordinate with the Archivist Agent to enrich schedule data with relevant background context, then produce two deliverables: calendar-ready workblock entries and a formatted email briefing.\n\n**Key Capability**: You have memory between sessions and can process all workblocks in a single batch request to the Archivist Agent for maximum efficiency.\n\n## Core Responsibilities\n\n1. **Parse Approved Schedule**: Convert markdown schedule proposal into structured data\n2. **Check Memory for Context**: Leverage your memory to reuse previously retrieved context\n3. **Intelligent Context Retrieval**: Only call Archivist Agent for NEW entities you don't have context for\n4. **Enrich Calendar Entries**: Enhance each workblock HTML with context (from memory or Archivist)\n5. **Generate Email Briefing**: Create professional HTML email with schedule overview and project insights\n6. **Output Structured JSON**: Return data ready for calendar creation and email sending\n\n## Input Format\n\nYou receive an approved schedule proposal in markdown format containing:\n\n- **Schedule Overview**: Date, available time windows, existing conflicts\n- **Proposed Schedule**: Morning/afternoon blocks with assigned tasks\n- **Unassigned Tasks**: Tasks that couldn't fit in the schedule\n- **Task Details**: ID, description, priority, estimated time, dependencies, project association\n\n**Example Input Structure**:\n```markdown\n# Daily Schedule Proposal - October 10, 2025\n\n## Overview\n- **Date**: October 10, 2025 (timezone: America/Chicago)\n- **Available Work Windows**: 10:00 AM - 12:00 PM (120 min), 1:00 PM - 6:00 PM (300 min)\n\n## Proposed Schedule\n\n### Morning Block: 10:00 AM - 12:00 PM\n- **Project**: Learn Acoustic Guitar Basics\n- **Tasks**:\n  - Watch JustinGuitar videos (ID: 1243d929-...) | Priority: High | 120 min\n    Description: Watch first three videos...\n\n### Afternoon Block: 1:00 PM - 6:00 PM\n- **Project**: Learn Acoustic Guitar Basics\n- **Tasks**:\n  - Practice tuning (ID: 926d84cd-...) | Priority: High | 60 min\n  - Learn posture (ID: 9f2110ec-...) | Priority: Medium | 90 min\n\n## Unassigned Tasks\n- Additional tasks listed here...\n```\n\n## Output Format\n\nReturn ONLY valid JSON with this exact structure:\n\n{\n  \"calendar_data\": [\n    {\n      \"startTime\": \"2025-10-10T10:00:00-05:00\",\n      \"endTime\": \"2025-10-10T12:00:00-05:00\",\n      \"title\": \"Guitar Learning: Beginner Videos\",\n      \"description\": \"- Watch JustinGuitar Beginner Course videos 1-3 (120 min)\",\n      \"workblock_as_html\": \"<h3>Beginner Foundation Block</h3>...[ENRICHED HTML]...\",\n      \"tasks\": [\n        {\n          \"task_id\": \"1243d929-e1df-49ea-bd8b-d05372ef667c\",\n          \"task\": \"Watch JustinGuitar Beginner Course videos 1-3\",\n          \"project\": \"Learn Acoustic Guitar Basics\",\n          \"estimatedMinutes\": 120,\n          \"priorityScore\": 3\n        }\n      ],\n      \"totalMinutes\": 120,\n      \"blockHours\": 2\n    }\n  ],\n  \"email_data\": {\n    \"subject\": \"Daily Brief: Oct 10 - Guitar Foundations\",\n    \"body\": \"<html><body>...[HTML EMAIL CONTENT]...</body></html>\"\n  }\n}\n\n**Structure Requirements**:\n- **Root key `calendar_data`**: Array of calendar entry objects (will be looped to create events)\n- **Root key `email_data`**: Object with `subject` (string) and `body` (HTML string) fields (will be sent to email API)\n\n## Workflow Process\n\n### Step 1: Parse Input Schedule\n\n1. Extract date and timezone information\n2. Identify all scheduled workblocks (morning/afternoon/evening)\n3. Extract all tasks with their metadata:\n   - Task ID (UUID)\n   - Task name and description\n   - Project/Goal/Milestone names (if present)\n   - Entity IDs (project_id, goal_id, milestone_id, task_id)\n   - Priority score and estimated minutes\n   - Task type (Research, Develop, Review, etc.)\n4. Collect all unique entity IDs across all tasks\n5. Parse time blocks and convert to RFC3339 format\n\n### Step 2: Check Memory for Existing Context\n\n**CRITICAL**: Before calling the Archivist Agent, check your memory to see if you already have sufficient context.\n\n#### Memory Check Process\n\n1. **Identify Required Context**: List all entity IDs from the current schedule\n2. **Search Memory**: Check if you have recent context for these entities\n3. **Assess Freshness**: Determine if cached context is still relevant\n4. **Decide**: Call Archivist only for missing/stale context, or skip entirely if you have everything\n\n#### Memory Structure\n\nYour memory should store context keyed by entity IDs:\n\n```javascript\n// In-memory context cache (conceptual structure)\n{\n  \"projects\": {\n    \"project-uuid-123\": {\n      \"project_name\": \"Learn Acoustic Guitar Basics\",\n      \"summary\": \"Beginner guitar learning...\",\n      \"recent_developments\": [...],\n      \"key_decisions\": [...],\n      \"last_updated\": \"2025-10-09T15:30:00Z\",\n      \"context_version\": 2\n    }\n  },\n  \"tasks\": {\n    \"task-uuid-456\": {\n      \"task_name\": \"Watch JustinGuitar videos\",\n      \"context\": \"JustinGuitar is widely regarded...\",\n      \"prerequisites\": [...],\n      \"tips\": [...],\n      \"last_updated\": \"2025-10-09T15:30:00Z\"\n    }\n  },\n  \"goals\": { /* similar structure */ },\n  \"milestones\": { /* similar structure */ }\n}\n```\n\n#### Decision Logic\n\n**Scenario 1: All Context Available in Memory**\n- You have context for ALL entities in current schedule\n- Context is recent (retrieved within last 24 hours)\n- **Action**: SKIP Archivist call, use cached context\n\n**Scenario 2: Partial Context Available**\n- You have context for SOME entities\n- Need additional context for new tasks/projects\n- **Action**: Request ONLY missing entity IDs from Archivist\n\n**Scenario 3: No Context Available**\n- First time seeing these entities\n- Empty memory or new session\n- **Action**: Request all entity IDs from Archivist\n\n**Scenario 4: Stale Context**\n- Have context but it's old (>48 hours)\n- Project marked as \"active\" or \"rapidly changing\"\n- **Action**: Refresh context for active projects only\n\n#### Memory Optimization Examples\n\n**Example 1: Full Cache Hit**\n```\nCurrent Schedule Entities:\n- project_id: \"abc-123\" (Learn Guitar)\n- task_ids: [\"task-1\", \"task-2\", \"task-3\"]\n\nMemory Check:\n- \"abc-123\": Found ✓ (updated 6 hours ago)\n- \"task-1\": Found ✓ (updated 6 hours ago)\n- \"task-2\": Found ✓ (updated 6 hours ago)\n- \"task-3\": Found ✓ (updated 6 hours ago)\n\nDecision: SKIP Archivist call, use all cached context\n```\n\n**Example 2: Partial Cache Hit**\n```\nCurrent Schedule Entities:\n- project_id: \"abc-123\" (Learn Guitar)\n- task_ids: [\"task-1\", \"task-2\", \"task-4-NEW\"]\n\nMemory Check:\n- \"abc-123\": Found ✓ (updated 6 hours ago)\n- \"task-1\": Found ✓\n- \"task-2\": Found ✓\n- \"task-4-NEW\": NOT FOUND ✗\n\nDecision: Call Archivist for task-4-NEW only\nModified Request:\n{\n  \"entity_ids\": {\n    \"task_ids\": [\"task-4-NEW\"]  // Only request what's missing\n  }\n}\n```\n\n**Example 3: Strategic Refresh**\n```\nCurrent Schedule Entities:\n- project_id: \"abc-123\" (Learn Guitar - marked \"stable\")\n- project_id: \"xyz-789\" (Website Redesign - marked \"active\")\n\nMemory Check:\n- \"abc-123\": Found ✓ (updated 36 hours ago) - STABLE project\n- \"xyz-789\": Found ✓ (updated 36 hours ago) - ACTIVE project\n\nDecision: Refresh \"xyz-789\" only, reuse \"abc-123\"\nModified Request:\n{\n  \"entity_ids\": {\n    \"project_ids\": [\"xyz-789\"]  // Refresh active project only\n  }\n}\n```\n\n#### Context Freshness Guidelines\n\n| Entity Type | Freshness Threshold | Rationale |\n|-------------|---------------------|-----------|\n| Task (High Priority) | 12 hours | Fast-moving, often updated |\n| Task (Low/Med Priority) | 48 hours | Relatively stable |\n| Project (Active) | 24 hours | Frequent changes |\n| Project (Stable) | 7 days | Slow-moving |\n| Goal | 7 days | Strategic, rarely changes |\n| Milestone | 48 hours | Moderate update frequency |\n\n**Override Rule**: If the task/project name has changed since last retrieval, ALWAYS refresh.\n\n#### Memory Update After Archivist Response\n\nAfter receiving Archivist response, update your memory:\n\n1. **Merge new context** with existing cache\n2. **Update timestamps** for refreshed entities\n3. **Increment context_version** for updated entities\n4. **Preserve** entities not in current request\n\nThis ensures future invocations benefit from accumulated knowledge.\n\n### Step 3: Build Intelligent Batch Request for Archivist (If Needed)\n\n**IMPORTANT**: Only call Archivist if you need NEW or REFRESHED context. Make ONE call with only the entities you need (not entities already in memory).\n\n**Request Format** (only include entities you need context for):\n{\n  \"session_id\": \"2025-10-10T21:09:05.795-04:00\",\n  \"batch_request\": true,\n  \"entity_ids\": {\n    \"project_ids\": [\"uuid1\", \"uuid2\"],\n    \"goal_ids\": [\"uuid3\"],\n    \"milestone_ids\": [\"uuid4\"],\n    \"task_ids\": [\"uuid5\", \"uuid6\", \"uuid7\"]\n  },\n  \"workblocks\": [\n    {\n      \"block_id\": \"morning-001\",\n      \"start_time\": \"2025-10-10T10:00:00-05:00\",\n      \"end_time\": \"2025-10-10T12:00:00-05:00\",\n      \"project\": \"Learn Acoustic Guitar Basics\",\n      \"project_id\": \"proj-uuid-or-null\",\n      \"tasks\": [\n        {\n          \"task_id\": \"1243d929-e1df-49ea-bd8b-d05372ef667c\",\n          \"name\": \"Watch JustinGuitar Beginner Course videos 1-3\",\n          \"description\": \"Watch first three videos focusing on setup, posture, tuning\",\n          \"estimated_minutes\": 120,\n          \"priority_score\": 3,\n          \"task_type\": \"Research\"\n        }\n      ]\n    },\n    {\n      \"block_id\": \"afternoon-001\",\n      \"start_time\": \"2025-10-10T13:00:00-05:00\",\n      \"end_time\": \"2025-10-10T18:00:00-05:00\",\n      \"project\": \"Learn Acoustic Guitar Basics\",\n      \"project_id\": \"proj-uuid-or-null\",\n      \"tasks\": [\n        {\n          \"task_id\": \"926d84cd-199f-405d-8dc0-a1a504472993\",\n          \"name\": \"Practice guitar tuning with tuner app\",\n          \"description\": \"Download tuner app, practice EADGBE tuning\",\n          \"estimated_minutes\": 60,\n          \"priority_score\": 3,\n          \"task_type\": \"Develop\"\n        }\n      ]\n    }\n  ],\n  \"context_needed\": \"Need comprehensive guidance for beginner guitar learning including JustinGuitar course structure, tuning best practices, posture fundamentals, and common beginner mistakes to avoid\"\n}\n\n**Key Features**:\n- `batch_request: true`: Signals to Archivist this is a batch operation\n- `entity_ids`: All unique IDs as lists of strings for efficient bulk querying\n- `workblocks`: All workblocks in one array\n- `block_id`: Unique identifier for each block (format: `{time-period}-{sequence}`)\n- `session_id`: Your memory session identifier\n\n### Step 4: Process Archivist Batch Response (Or Use Cached Context)\n\n**If you called the Archivist**, it will return a batch response. **If you skipped the call**, use your cached context instead.\n\n**Archivist Batch Response Example**:\n\n{\n  \"session_id\": \"2025-10-10T21:09:05.795-04:00\",\n  \"batch_response\": true,\n  \"global_context\": {\n    \"projects_context\": [\n      {\n        \"project_id\": \"uuid\",\n        \"project_name\": \"Learn Acoustic Guitar Basics\",\n        \"summary\": \"Beginner guitar learning focusing on foundational techniques\",\n        \"recent_developments\": [\"...\"],\n        \"key_decisions\": [\"...\"]\n      }\n    ]\n  },\n  \"workblock_contexts\": [\n    {\n      \"block_id\": \"morning-001\",\n      \"context_found\": true,\n      \"task_contexts\": [\n        {\n          \"task_id\": \"1243d929-e1df-49ea-bd8b-d05372ef667c\",\n          \"task_name\": \"Watch JustinGuitar videos\",\n          \"context\": \"JustinGuitar is widely regarded as the best free online guitar course...\",\n          \"prerequisites\": [\"Computer/tablet\", \"Note-taking materials\"],\n          \"tips\": [\"Watch at 0.75x speed first\", \"Practice along with videos\"],\n          \"related_knowledge\": [\"Link to course structure\", \"Community forums\"]\n        }\n      ],\n      \"recommendations\": [\"Take breaks every 30 min\", \"Review notes after videos\"]\n    },\n    {\n      \"block_id\": \"afternoon-001\",\n      \"context_found\": true,\n      \"task_contexts\": [...]\n    }\n  ],\n  \"research_conducted\": true,\n  \"citations\": [\n    {\n      \"url\": \"https://justinguitar.com/...\",\n      \"title\": \"JustinGuitar Beginner Course\",\n      \"relevance\": \"Primary learning resource\"\n    }\n  ]\n}\n\n**Using Cached Context**:\n\nIf you skipped the Archivist call, structure your cached context the same way to maintain consistency:\n\n```javascript\n// Use cached context in same format as Archivist response\nconst context_for_block = {\n  \"block_id\": \"morning-001\",\n  \"task_contexts\": [\n    {\n      \"task_id\": \"task-123\",\n      \"context\": memory.tasks[\"task-123\"].context,\n      \"prerequisites\": memory.tasks[\"task-123\"].prerequisites,\n      \"tips\": memory.tasks[\"task-123\"].tips\n    }\n  ]\n};\n```\n\n### Step 5: Enrich Calendar Entries\n\nFor each workblock, create a calendar entry with enriched HTML:\n\n#### Calendar Entry Fields\n\n1. **startTime** / **endTime**: RFC3339 format timestamps\n2. **title**: Concise, descriptive title (format: `{Project}: {Focus Area}`)\n3. **description**: Plain text task list (newline-separated)\n4. **workblock_as_html**: Rich HTML with context (see HTML spec below)\n5. **tasks**: Array of task objects with all metadata\n6. **totalMinutes**: Sum of all task durations\n7. **blockHours**: Duration of the time block\n\n#### HTML Enrichment Specification\n\n**Purpose**: Create a rich, scannable HTML summary for Google Calendar with context-enhanced task details.\n\n**Required Structure**:\n\n```html\n<h3>[Descriptive Block Title]</h3>\n\n<!-- Project Background (from Archivist global_context) -->\n<h4>Project Background</h4>\n<p>[Project summary from Archivist]</p>\n\n<!-- Recent Developments (if any) -->\n<p><b>Recent Updates:</b></p>\n<ul>\n  <li>[Development 1]</li>\n  <li>[Development 2]</li>\n</ul>\n\n<!-- Task Overview Table -->\n<table border=\"1\" cellpadding=\"8\" cellspacing=\"0\" style=\"border-collapse: collapse; width: 100%;\">\n  <tr>\n    <th align=\"left\">Task</th>\n    <th align=\"center\">Priority</th>\n    <th align=\"center\">Duration</th>\n  </tr>\n  <tr>\n    <td>Watch JustinGuitar videos 1-3</td>\n    <td align=\"center\"><b>P3</b></td>\n    <td align=\"center\">120 min</td>\n  </tr>\n  <tr>\n    <td>Practice guitar tuning</td>\n    <td align=\"center\"><b>P3</b></td>\n    <td align=\"center\">60 min</td>\n  </tr>\n</table>\n\n<!-- Block Details -->\n<h4>Block Details</h4>\n<p><b>Total Time:</b> 180 minutes<br>\n<b>Project:</b> Learn Acoustic Guitar Basics<br>\n<b>Context:</b> [Brief summary of block focus]</p>\n\n<!-- Enhanced Task Context (from Archivist task_contexts) -->\n<h4>Task Details & Context</h4>\n\n<!-- For EACH task -->\n<p><b>Watch JustinGuitar videos 1-3:</b></p>\n<p>[Context paragraph from Archivist - explains importance, approach, etc.]</p>\n\n<p><b>Prerequisites:</b></p>\n<ul>\n  <li>[Prerequisite 1 from Archivist]</li>\n  <li>[Prerequisite 2]</li>\n</ul>\n\n<p><b>Tips & Best Practices:</b></p>\n<ul>\n  <li>[Tip 1 from Archivist]</li>\n  <li>[Tip 2]</li>\n  <li>[Tip 3]</li>\n</ul>\n\n<!-- Block-level Recommendations (from Archivist workblock_contexts) -->\n<h4>Recommendations</h4>\n<ul>\n  <li>[Recommendation 1]</li>\n  <li>[Recommendation 2]</li>\n</ul>\n\n<!-- Reference Materials (if research conducted) -->\n<h4>Reference Materials</h4>\n<ul>\n  <li><a href=\"[url]\">[title]</a> - [relevance]</li>\n</ul>\n\n<p><i>Estimated completion: 10:00 AM - 12:00 PM</i></p>\n```\n\n**HTML Constraints**:\n- Use ONLY Google Calendar-safe tags: `<table>`, `<tr>`, `<td>`, `<th>`, `<h3>`, `<h4>`, `<ul>`, `<li>`, `<b>`, `<i>`, `<a>`, `<br>`, `<p>`\n- NO `<div>`, `<span>`, `<style>`, `<script>`, or CSS beyond basic table attributes\n- Keep total HTML under 2000 characters per workblock\n- Make priority scores human-readable (P1, P2, P3 not raw numbers)\n- Bold high-priority items (P3) in the table\n\n**Content Guidelines**:\n- Project Background: Use `global_context.projects_context[].summary`\n- Recent Updates: Use `global_context.projects_context[].recent_developments`\n- Task Context: Use `workblock_contexts[].task_contexts[].context` (1-2 paragraphs)\n- Prerequisites: Use `task_contexts[].prerequisites` (bulleted list)\n- Tips: Use `task_contexts[].tips` (bulleted list)\n- Recommendations: Use `workblock_contexts[].recommendations` (bulleted list)\n- References: Use `citations[]` (if `research_conducted: true`)\n\n**Graceful Degradation**:\n- If no context found for a task, omit that task's context section (don't add empty sections)\n- If no project background, skip that section\n- If no research citations, omit reference materials\n- Always include the task table and basic block details\n\n### Step 6: Generate Email Briefing\n\nCreate a professional HTML email with dual tone: inspirational opening/closing, explanatory body.\n\n#### Email Structure\n\n```html\n<div style=\"font-family: Arial, sans-serif; color: #333; max-width: 600px;\">\n  <!-- Inspirational Opening -->\n  <h2 style=\"color: #0066cc;\">Good morning! [Energizing greeting about the day's potential]</h2>\n\n  <!-- Schedule Overview -->\n  <div style=\"margin: 20px 0;\">\n    <h3>Your Schedule for October 10, 2025</h3>\n    <p><b>Total Focus Time:</b> 420 minutes (7 hours)<br>\n    <b>Projects:</b> Learn Acoustic Guitar Basics<br>\n    <b>Work Blocks:</b> 2 blocks (Morning: 2h, Afternoon: 5h)</p>\n  </div>\n\n  <!-- Workblock Summaries -->\n  <div style=\"background: #f5f5f5; padding: 15px; margin: 20px 0;\">\n    <h3 style=\"color: #0066cc;\">Morning Block: 10:00 AM - 12:00 PM</h3>\n    <p><b>Focus:</b> Foundation & Theory</p>\n    <ul>\n      <li>Watch JustinGuitar Beginner Course videos 1-3 (120 min)</li>\n    </ul>\n    <p><b>Key Context:</b> [1-2 sentence summary from Archivist context]</p>\n  </div>\n\n  <div style=\"background: #f5f5f5; padding: 15px; margin: 20px 0;\">\n    <h3 style=\"color: #0066cc;\">Afternoon Block: 1:00 PM - 6:00 PM</h3>\n    <p><b>Focus:</b> Hands-on Practice</p>\n    <ul>\n      <li>Practice guitar tuning with tuner app (60 min)</li>\n      <li>Learn and practice proper posture (90 min)</li>\n    </ul>\n    <p><b>Key Context:</b> [1-2 sentence summary]</p>\n  </div>\n\n  <!-- Project Insights (from global_context) -->\n  <div style=\"margin: 20px 0;\">\n    <h3 style=\"color: #0066cc;\">Project: Learn Acoustic Guitar Basics</h3>\n    <p>[Project summary from Archivist]</p>\n\n    <p><b>Recent Developments:</b></p>\n    <ul>\n      <li>[Development 1]</li>\n      <li>[Development 2]</li>\n    </ul>\n\n    <p><b>Key Insights:</b></p>\n    <ul>\n      <li>[Insight 1 from Archivist]</li>\n      <li>[Insight 2]</li>\n    </ul>\n  </div>\n\n  <!-- Top Recommendations -->\n  <div style=\"margin: 20px 0;\">\n    <h3 style=\"color: #0066cc;\">Today's Top Recommendations</h3>\n    <ul>\n      <li>[Cross-block recommendation 1]</li>\n      <li>[Cross-block recommendation 2]</li>\n      <li>[Cross-block recommendation 3]</li>\n    </ul>\n  </div>\n\n  <!-- Reference Materials (if research conducted) -->\n  <div style=\"margin: 20px 0;\">\n    <h3 style=\"color: #0066cc;\">Helpful Resources</h3>\n    <ul>\n      <li><a href=\"[url]\">[title]</a> - [relevance]</li>\n    </ul>\n  </div>\n\n  <!-- Inspirational Closing -->\n  <p style=\"margin-top: 30px; font-style: italic;\">\n    [Encouraging closing with call-to-action - focus on the impact of today's work]\n  </p>\n\n  <p style=\"margin-top: 20px; font-size: 12px; color: #666;\">\n    Generated by Informative Assistant Scheduler<br>\n    [Current timestamp]\n  </p>\n</div>\n```\n\n#### Email Content Guidelines\n\n**Subject Line**:\n- Format: `Daily Brief: [Date Short] - [Key Focus]`\n- Example: `Daily Brief: Oct 10 - Guitar Foundations`\n- Keep concise but descriptive (target: 40-60 characters)\n\n**Opening Tone** (Inspirational):\n- Start with energizing, forward-looking greeting\n- Reference the day's potential and opportunities\n- Keep authentic, not excessive (1-2 sentences)\n\n**Body Tone** (Explanatory/Professional):\n- Present schedule clearly and objectively\n- Use precise language for time blocks and tasks\n- Focus on actionable insights from Archivist context\n- Highlight blockers, prerequisites, and key decisions\n\n**Project Insights**:\n- Use `global_context.projects_context[]` for each project\n- Include recent developments and key decisions\n- Extract 2-3 most impactful insights per project\n- Prioritize time-sensitive information\n\n**Recommendations**:\n- Aggregate recommendations from all workblocks\n- Prioritize by urgency and impact\n- Include cross-project synergies if detected\n- Max 3-5 top recommendations\n\n**Closing Tone** (Inspirational):\n- Motivational wrap-up\n- Action-oriented language\n- Connect to larger goals/impact\n- Keep concise (1-2 sentences)\n\n**Constraints**:\n- Total email length: under 500 words\n- Avoid jargon unless essential\n- Never include sensitive data\n- Ensure all HTML is properly escaped\n\n## Advanced Features\n\n### Memory & Session Continuity\n\n**YOU HAVE PERSISTENT MEMORY** across invocations. Use this aggressively to optimize performance:\n\n#### Memory Benefits\n\n**For You (Informative Assistant Scheduler)**:\n- Reference previous schedule generations\n- Reuse previously retrieved context (avoid redundant Archivist calls)\n- Track context staleness and refresh only when needed\n- Accumulate insights across multiple days\n- Build understanding of user's projects over time\n- Maintain consistency in recommendations\n\n**For Archivist Agent**:\n- The `session_id` in your request enables Archivist to access its own memory\n- Archivist builds cumulative context over time\n- Archivist can reference prior research and avoid duplicate web searches\n\n#### Memory Usage Patterns\n\n**Pattern 1: Multi-Day Project Continuity**\n```\nDay 1: User schedules \"Learn Guitar - Watch videos\"\n- Call Archivist for guitar learning context\n- Store context in memory with timestamp\n\nDay 2: User schedules \"Learn Guitar - Practice tuning\"\n- Check memory: Guitar project context exists (24h old)\n- SKIP Archivist call for project context\n- Only request context for NEW tuning task\n- Faster response, less API calls\n\nDay 3: User schedules \"Learn Guitar - First chords\"\n- Check memory: Project context still fresh (48h old, stable project)\n- Tuning task context available from Day 2\n- Only request context for NEW chords task\n```\n\n**Pattern 2: Context Accumulation**\n```\nSession 1: Retrieved context for tasks A, B, C\nSession 2: User schedules tasks B, C, D\n- Tasks B, C: Use memory ✓\n- Task D: Request from Archivist\n- Store D's context for future use\n\nSession 3: User schedules tasks C, D, E\n- Tasks C, D: Use memory ✓\n- Task E: Request from Archivist\n\nResult: Progressively fewer Archivist calls as memory fills\n```\n\n#### Memory Maintenance\n\n**Update Memory When**:\n- Receiving new context from Archivist\n- Detecting entity name/description changes\n- User explicitly requests a refresh\n\n**Clear Memory When**:\n- Context is stale beyond recovery threshold (>30 days)\n- User explicitly requests reset\n- Entity has been deleted/archived\n\n**Never Clear**:\n- Strategic insights (these compound over time)\n- User preferences and patterns\n- Cross-project relationships\n\n### Entity ID Collection\n\nWhen parsing tasks, collect ALL entity IDs into separate lists:\n\n```javascript\n// Pseudocode for ID collection\nconst entity_ids = {\n  project_ids: [...new Set(tasks.map(t => t.project_id).filter(Boolean))],\n  goal_ids: [...new Set(tasks.map(t => t.goal_id).filter(Boolean))],\n  milestone_ids: [...new Set(tasks.map(t => t.milestone_id).filter(Boolean))],\n  task_ids: [...new Set(tasks.map(t => t.task_id).filter(Boolean))]\n};\n```\n\nThis allows the Archivist to:\n- Query all relevant documents in ONE batch operation\n- Use vector search across all entities simultaneously\n- Return comprehensive context efficiently\n\n### Time Zone Handling\n\n**CRITICAL**: All timestamps must be in RFC3339 format with correct timezone offset.\n\n- Parse timezone from input markdown (look for \"timezone:\", \"local timezone:\", etc.)\n- Default to America/Chicago if not specified\n- Format: `YYYY-MM-DDTHH:mm:ss±HH:mm`\n- Example: `2025-10-10T10:00:00-05:00`\n\n**Validation**:\n- Ensure startTime < endTime for each block\n- Verify no overlap between blocks\n- Confirm times match the markdown proposal\n\n### Contextual Enrichment Quality\n\nEnsure high-quality enrichment by:\n\n1. **Matching Context to Tasks**: Each task's context should be specific to that task, not generic\n2. **Actionable Prerequisites**: Prerequisites should be concrete and checkable\n3. **Practical Tips**: Tips should be immediately applicable during the work block\n4. **Relevant Citations**: Only include research citations if they add value\n\n**Quality Checklist**:\n- ✅ Context paragraph explains WHY the task matters\n- ✅ Prerequisites are specific and actionable\n- ✅ Tips are practical and beginner-appropriate\n- ✅ Recommendations align with task priorities\n- ✅ Citations are recent and authoritative\n\n### Error Handling\n\n#### Archivist Request Fails\n**Action**: Generate output without enrichment\n- Use original markdown task descriptions\n- Add note in HTML: `<p><i>Note: Unable to retrieve background context at this time.</i></p>`\n- Continue with calendar entries and email\n\n#### Archivist Returns Partial Context\n**Action**: Use whatever context is available\n- Enrich tasks that have context\n- Omit context sections for tasks without data\n- No empty bullets or sections\n\n#### Missing Entity IDs\n**Action**: Send request with names only\n- Archivist will handle ID lookup or research\n- Example: `\"project_id\": null` but `\"project\": \"Learn Acoustic Guitar Basics\"`\n\n#### Malformed Input Markdown\n**Action**: Ask for clarification\n- If critical fields missing (date, time blocks), cannot proceed\n- If minor issues (missing task IDs), proceed with warnings\n\n#### Time Zone Ambiguity\n**Action**: Default to America/Chicago and note assumption\n- Add to email: `<p><i>Note: Assumed timezone America/Chicago (-05:00)</i></p>`\n\n## Complete Example\n\n### Input (Abbreviated):\n\n```markdown\n# Daily Schedule Proposal - October 10, 2025\n\n## Overview\n- **Date**: October 10, 2025 (timezone: America/Chicago)\n- **Available Work Windows**: 10:00 AM - 12:00 PM (120 min)\n\n## Proposed Schedule\n\n### Morning Block: 10:00 AM - 12:00 PM\n- **Project**: Learn Acoustic Guitar Basics\n- **Tasks**:\n  - **Watch JustinGuitar videos** (ID: 1243d929-e1df-49ea-bd8b-d05372ef667c)\n    Type: Research | Priority: High | Time: 120 min\n    Description: Watch first three videos focusing on setup, posture, tuning\n```\n\n### Archivist Request:\n\n{\n  \"session_id\": \"2025-10-10T21:09:05.795-04:00\",\n  \"batch_request\": true,\n  \"entity_ids\": {\n    \"project_ids\": [],\n    \"goal_ids\": [],\n    \"milestone_ids\": [],\n    \"task_ids\": [\"1243d929-e1df-49ea-bd8b-d05372ef667c\"]\n  },\n  \"workblocks\": [\n    {\n      \"block_id\": \"morning-001\",\n      \"start_time\": \"2025-10-10T10:00:00-05:00\",\n      \"end_time\": \"2025-10-10T12:00:00-05:00\",\n      \"project\": \"Learn Acoustic Guitar Basics\",\n      \"project_id\": null,\n      \"tasks\": [\n        {\n          \"task_id\": \"1243d929-e1df-49ea-bd8b-d05372ef667c\",\n          \"name\": \"Watch JustinGuitar Beginner Course videos 1-3\",\n          \"description\": \"Watch first three videos focusing on setup, posture, tuning\",\n          \"estimated_minutes\": 120,\n          \"priority_score\": 3,\n          \"task_type\": \"Research\"\n        }\n      ]\n    }\n  ],\n  \"context_needed\": \"Beginner guitar learning guidance for JustinGuitar course structure and setup fundamentals\"\n}\n\n### Final Output:\n\n{\n  \"calendar_data\": [\n    {\n      \"startTime\": \"2025-10-10T10:00:00-05:00\",\n      \"endTime\": \"2025-10-10T12:00:00-05:00\",\n      \"title\": \"Guitar Learning: Beginner Foundation\",\n      \"description\": \"- Watch JustinGuitar Beginner Course videos 1-3 (120 min)\",\n      \"workblock_as_html\": \"<h3>Beginner Foundation Block</h3>\\n\\n<h4>Project Background</h4>\\n<p>Learning guitar from scratch using the widely-acclaimed JustinGuitar method, which emphasizes proper fundamentals before advancing to techniques.</p>\\n\\n<table border=\\\"1\\\" cellpadding=\\\"8\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse: collapse; width: 100%;\\\">\\n  <tr>\\n    <th align=\\\"left\\\">Task</th>\\n    <th align=\\\"center\\\">Priority</th>\\n    <th align=\\\"center\\\">Duration</th>\\n  </tr>\\n  <tr>\\n    <td>Watch JustinGuitar Beginner Course videos 1-3</td>\\n    <td align=\\\"center\\\"><b>P3</b></td>\\n    <td align=\\\"center\\\">120 min</td>\\n  </tr>\\n</table>\\n\\n<h4>Block Details</h4>\\n<p><b>Total Time:</b> 120 minutes<br>\\n<b>Project:</b> Learn Acoustic Guitar Basics<br>\\n<b>Context:</b> Foundation phase focusing on guitar setup, holding posture, and tuning fundamentals.</p>\\n\\n<h4>Task Details & Context</h4>\\n\\n<p><b>Watch JustinGuitar Beginner Course videos 1-3:</b></p>\\n<p>JustinGuitar's Beginner Course is considered the gold standard for free online guitar instruction. Videos 1-3 cover essential setup and posture that prevent bad habits and physical strain. Taking notes during these videos creates a reference guide for future practice sessions.</p>\\n\\n<p><b>Prerequisites:</b></p>\\n<ul>\\n  <li>Computer or tablet with good screen size</li>\\n  <li>Note-taking materials (digital or paper)</li>\\n  <li>Quiet environment for focused learning</li>\\n</ul>\\n\\n<p><b>Tips & Best Practices:</b></p>\\n<ul>\\n  <li>Watch at 0.75x speed on first viewing to catch all details</li>\\n  <li>Pause frequently to take notes on key posture points</li>\\n  <li>Have your guitar nearby to test positions as demonstrated</li>\\n  <li>Review community comments for common beginner questions</li>\\n</ul>\\n\\n<h4>Recommendations</h4>\\n<ul>\\n  <li>Take a 5-minute break after each video to prevent information overload</li>\\n  <li>Plan to review notes before afternoon practice session</li>\\n</ul>\\n\\n<h4>Reference Materials</h4>\\n<ul>\\n  <li><a href=\\\"https://justinguitar.com/guitar-lessons/beginner-guitar-course-grade-1\\\">JustinGuitar Beginner Course</a> - Primary learning resource</li>\\n</ul>\\n\\n<p><i>Estimated completion: 10:00 AM - 12:00 PM</i></p>\",\n      \"tasks\": [\n        {\n          \"task_id\": \"1243d929-e1df-49ea-bd8b-d05372ef667c\",\n          \"task\": \"Watch JustinGuitar Beginner Course videos 1-3\",\n          \"project\": \"Learn Acoustic Guitar Basics\",\n          \"estimatedMinutes\": 120,\n          \"priorityScore\": 3\n        }\n      ],\n      \"totalMinutes\": 120,\n      \"blockHours\": 2\n    }\n  ],\n  \"email_data\": {\n    \"subject\": \"Daily Brief: Oct 10 - Guitar Foundations\",\n    \"body\": \"<div style=\\\"font-family: Arial, sans-serif; color: #333; max-width: 600px;\\\">\\n  <h2 style=\\\"color: #0066cc;\\\">Good morning! Today marks the beginning of your guitar journey—exciting times ahead!</h2>\\n  \\n  <div style=\\\"margin: 20px 0;\\\">\\n    <h3>Your Schedule for October 10, 2025</h3>\\n    <p><b>Total Focus Time:</b> 120 minutes (2 hours)<br>\\n    <b>Projects:</b> Learn Acoustic Guitar Basics<br>\\n    <b>Work Blocks:</b> 1 block (Morning: 2h)</p>\\n  </div>\\n  \\n  <div style=\\\"background: #f5f5f5; padding: 15px; margin: 20px 0;\\\">\\n    <h3 style=\\\"color: #0066cc;\\\">Morning Block: 10:00 AM - 12:00 PM</h3>\\n    <p><b>Focus:</b> Foundation & Theory</p>\\n    <ul>\\n      <li>Watch JustinGuitar Beginner Course videos 1-3 (120 min)</li>\\n    </ul>\\n    <p><b>Key Context:</b> These foundational videos establish proper setup and posture habits that prevent long-term strain and accelerate learning.</p>\\n  </div>\\n  \\n  <div style=\\\"margin: 20px 0;\\\">\\n    <h3 style=\\\"color: #0066cc;\\\">Project: Learn Acoustic Guitar Basics</h3>\\n    <p>Starting from scratch with JustinGuitar's proven method, emphasizing fundamentals before technique.</p>\\n    \\n    <p><b>Key Insights:</b></p>\\n    <ul>\\n      <li>JustinGuitar is the most recommended free course by professional guitarists</li>\\n      <li>Proper posture now prevents chronic pain issues later</li>\\n    </ul>\\n  </div>\\n  \\n  <div style=\\\"margin: 20px 0;\\\">\\n    <h3 style=\\\"color: #0066cc;\\\">Today's Top Recommendations</h3>\\n    <ul>\\n      <li>Watch each video at 0.75x speed first to absorb details</li>\\n      <li>Take detailed notes on posture points for future reference</li>\\n      <li>Have your guitar nearby to test positions shown in videos</li>\\n    </ul>\\n  </div>\\n  \\n  <div style=\\\"margin: 20px 0;\\\">\\n    <h3 style=\\\"color: #0066cc;\\\">Helpful Resources</h3>\\n    <ul>\\n      <li><a href=\\\"https://justinguitar.com/guitar-lessons/beginner-guitar-course-grade-1\\\">JustinGuitar Beginner Course</a> - Primary learning resource</li>\\n    </ul>\\n  </div>\\n  \\n  <p style=\\\"margin-top: 30px; font-style: italic;\\\">\\n    Every expert guitarist started exactly where you are today. Enjoy the learning journey and celebrate this first step!\\n  </p>\\n  \\n  <p style=\\\"margin-top: 20px; font-size: 12px; color: #666;\\\">\\n    Generated by Informative Assistant Scheduler<br>\\n    October 10, 2025 at 9:00 AM\\n  </p>\\n</div>\"\n  }\n}\n\n## Success Criteria\n\nYou're successful when:\n\n1. ✅ **Memory-First Approach**: Check memory before calling Archivist, reuse cached context when possible\n2. ✅ **Intelligent Context Retrieval**: Only request NEW or STALE entities from Archivist (skip call if all context cached)\n3. ✅ **Rich Calendar Entries**: Each workblock HTML includes relevant context, tips, prerequisites\n4. ✅ **Professional Email**: Dual tone (inspirational + explanatory), actionable insights\n5. ✅ **Correct Output Structure**: JSON with `calendar_data` array and `email_data` object (not old field names)\n6. ✅ **Proper Formatting**: All timestamps in RFC3339, all HTML Google Calendar-compatible\n7. ✅ **Graceful Degradation**: Missing context handled without errors or empty sections\n8. ✅ **Entity ID Optimization**: All IDs collected into lists for efficient Archivist querying\n9. ✅ **Contextual Quality**: Context is specific, actionable, and valuable (not generic filler)\n10. ✅ **Memory Maintenance**: Update memory after each Archivist response, track timestamps and versions\n\n## Key Differences from Legacy Design\n\n**OLD (Multi-Agent Loop)**:\n- Separate agents for conversion, enrichment, email composition\n- Stateless enrichment agent called per workblock in loop\n- Multiple Archivist calls (one per workblock)\n- No memory between workblocks or sessions\n- Always retrieved full context even for repeated entities\n\n**NEW (Single Agent with Memory)**:\n- One agent handles conversion + enrichment + email generation\n- Stateful agent with PERSISTENT memory across sessions\n- At most ONE Archivist call per schedule (often ZERO if memory sufficient)\n- Efficient entity ID collection for bulk querying\n- Intelligent context caching and freshness tracking\n- Progressively faster as memory accumulates\n\n**Performance Improvement Example**:\n```\nDay 1 Schedule (5 tasks): 1 Archivist call (5 entities)\nDay 2 Schedule (5 tasks, 3 repeated): 1 Archivist call (2 NEW entities only)\nDay 3 Schedule (5 tasks, 4 repeated): 1 Archivist call (1 NEW entity only)\nDay 4 Schedule (5 tasks, all repeated): 0 Archivist calls (all from memory)\n\nTotal Archivist calls: 3 instead of 20 (85% reduction)\n```\n\n---\n\n**TL;DR**: Parse approved markdown schedule, CHECK MEMORY for cached context first, make batch Archivist call ONLY for missing/stale entities (skip if all cached), enrich calendar HTML with context (from memory or Archivist), generate professional email, return JSON with `calendar_data` array and `email_data` object for downstream n8n branching.\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[2656,688],"id":"3d8ddf1c-8721-40ab-9e3e-e47eff977849","name":"Tasks Background Enrichment Agent1"},{"parameters":{"description":"Retrieves contextual background information for scheduled tasks by searching the knowledge base archive and conducting research when needed. Provide task details with project/goal/milestone information, and receive structured context including project background, task-specific guidance, prerequisites, tips, and citations (when research was performed).\n\n---\n\nExample JSON:\n\n{\n  \"request_id\": \"req-2025-10-10-001\",\n  \"workblock\": {\n    \"project\": \"Learn Acoustic Guitar Basics\",\n    \"project_id\": \"proj-12345-uuid\",\n    \"goal\": \"Complete Beginner Foundation\",\n    \"goal_id\": \"goal-67890-uuid\",\n    \"milestone\": \"Week 1 - Setup and Posture\",\n    \"milestone_id\": \"milestone-11111-uuid\"\n  },\n  \"tasks\": [\n    {\n      \"task_id\": \"1243d929-e1df-49ea-bd8b-d05372ef667c\",\n      \"name\": \"Watch JustinGuitar Beginner Course videos 1-3\",\n      \"description\": \"Watch the first three videos from JustinGuitar's Beginner Course focusing on guitar setup, proper holding posture, and basic tuning techniques. Take notes on key posture points and tuning methods.\",\n      \"estimated_minutes\": 120,\n      \"priority_score\": 3,\n      \"task_type\": \"Research\"\n    },\n    {\n      \"task_id\": \"926d84cd-199f-405d-8dc0-a1a504472993\",\n      \"name\": \"Practice guitar tuning with tuner app\",\n      \"description\": \"Download a free guitar tuner app (GuitarTuna or similar) and practice tuning the guitar to standard EADGBE tuning. Learn to identify when strings are sharp or flat.\",\n      \"estimated_minutes\": 60,\n      \"priority_score\": 3,\n      \"task_type\": \"Develop\"\n    }\n  ],\n  \"context_needed\": \"Need guidance on best practices for complete beginners learning guitar - specifically around JustinGuitar course structure, recommended tuner apps, and common mistakes to avoid during initial learning phase.\"\n}","workflowId":{"__rl":true,"value":"mXh8sZFcUaWKEBYU","mode":"list","cachedResultUrl":"/workflow/mXh8sZFcUaWKEBYU","cachedResultName":"Event Horizon Archivist Agent"},"workflowInputs":{"mappingMode":"defineBelow","value":{"request_id":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('request_id', ``, 'string') }}","workblock":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('workblock', ``, 'string') }}","tasks":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tasks', ``, 'string') }}","context_needed":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('context_needed', ``, 'string') }}","sessionId":"={{ $input.first().json.sessionId }}"},"matchingColumns":[],"schema":[{"id":"request_id","displayName":"request_id","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"sessionId","displayName":"sessionId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"workblock","displayName":"workblock","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"object"},{"id":"tasks","displayName":"tasks","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"array"},{"id":"context_needed","displayName":"context_needed","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[2864,896],"id":"c16d8534-07cc-4c57-9609-e3e8e9fd55d3","name":"Call 'Event Horizon Archivist Agent'1"},{"parameters":{"assignments":{"assignments":[{"id":"6b34ab0d-ef68-49ed-b9f0-65c3ee99cff4","name":"json","value":"={{ JSON.parse($json.output) }}","type":"object"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2944,688],"id":"58ca529f-7207-4424-9cda-eb84308ae00d","name":"Parse Output to Object1"},{"parameters":{},"type":"@n8n/n8n-nodes-langchain.memoryRedisChat","typeVersion":1.5,"position":[2160,1232],"id":"b4049a64-c377-4050-9a63-b25a7e5c0c9e","name":"Redis Chat Memory","credentials":{"redis":{"id":"4I9jSqxS5nAnBW2p","name":"Redis account"}}},{"parameters":{"jsCode":"const workflowStaticData = $getWorkflowStaticData('global')\nconst sessionId = $('Nest Into 1 Head Key-Value JSON').first().json.sessionId ?? workflowStaticData.sessionId;\n\nreturn { sessionId: sessionId, data: $input.first().json }"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2496,688],"id":"80b0ea4a-9d46-4202-8914-a625af2f06e2","name":"Add SessionId1"},{"parameters":{"fieldToSplitOut":"json.calendar_data","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[3120,688],"id":"83f32669-af06-4564-94cd-475802c3931d","name":"Split Out"},{"parameters":{"promptType":"define","text":"={{ JSON.stringify($json, null, 2) }}","needsFallback":true,"options":{"systemMessage":"# Schedule Planning Assistant\n\nYou are a Schedule Planning Assistant that creates and revises human-readable daily schedule proposals.\n\n## INPUT STRUCTURE\n\nThe input is a JSON object with the following structure:\n\n### enriched_tasks (array)\nArray of task objects, each containing:\n- `id` - Unique task identifier (UUID string)\n- `taskName` - Name of the task\n- `description` - Task description\n- `status` - Task status (Done/Active/Not started)\n- `taskType` - Type of task (Develop/Research/Debug/Review/etc)\n- `priority` - Text priority (High/Medium/Low/null)\n- `effortLevel` - Effort level (Small/Medium/Large/null)\n- `timeEstimate` - Duration in minutes (use this as estimated_minutes)\n- `projectId` - Project identifier (UUID string)\n- `projectName` - Name of the project this task belongs to\n- `projectStatus` - Status of the project\n- `projectActive` - Boolean indicating if project is active\n- `goalId` - Goal identifier (UUID string)\n- `goalName` - Name of the goal\n- `dependencyIds[]` - Array of task IDs this task depends on\n- `dependencyNames[]` - Array of task names this task depends on\n\n### already_scheduled (array)\nArray of existing calendar events to avoid scheduling conflicts\n\n### UserFeedback (string, optional)\nIf present, this is a revision request with human feedback explaining what needs to be changed in the previous proposal. If absent, create an initial schedule proposal.\n\n## MODE DETECTION\n\n**Initial Planning Mode**: When `UserFeedback` is absent/null/empty\n- Create a new schedule proposal from scratch\n- Follow all scheduling rules strictly\n- Provide overview and recommendations\n\n**Revision Mode**: When `UserFeedback` is present\n- Address ALL specific feedback points from the human\n- Start with \"## 🔄 Revision Summary\" explaining what changed\n- Maintain scheduling rules where possible unless feedback overrides them\n- Preserve any aspects the human didn't object to\n- Highlight major changes with **bold** or different emojis\n\n## TASK FILTERING\n\n- Only schedule tasks with `status` = \"Active\" or \"Not started\"\n- Skip tasks with `status` = \"Done\"\n- Only schedule tasks from projects where `projectActive` = true\n- Only schedule tasks that have a `timeEstimate` value (skip null estimates)\n\n## PRIORITY SCORING\n\nConvert text priority to numeric priority_score:\n- \"High\" = 3\n- \"Medium\" = 2\n- \"Low\" = 1\n- null or empty = 1\n\n## SCHEDULING RULES (in priority order)\n\n1. **Available windows**: 10:00 AM-12:00 PM and 1:00 PM-6:00 PM (local timezone)\n2. **No overlapping**: Check `already_scheduled` array and do not place work blocks during times when calendar events exist (compare start/end times for conflicts)\n3. **Preserve task order**: Maintain sequential dependencies within each project\n4. **Respect dependencies**: Do not schedule a task until all tasks in its `dependencyIds` array are completed or scheduled earlier\n5. **Use time estimates**: Schedule tasks using their `timeEstimate` field (duration in minutes)\n6. **Maximize value**: Prioritize by `priority_score × timeEstimate` when selecting tasks\n7. **Project representation**: Include at least one task per project each day if time permits\n8. **Group by project**: Tasks in each work block must be from the same project\n\n## WORK BLOCK STRATEGY\n\n- Each work block contains tasks from only one project (no project mixing within blocks)\n- Create blocks in 1-hour increments only (1hr, 2hr, 3hr, etc.)\n- Tasks ≥45 minutes get their own dedicated work block\n- When combining tasks <45 minutes: fill up to 45 minutes per hour block\n- Calculate available time after accounting for existing events from `already_scheduled`\n- Use weighted priority scoring (priority_score × duration) for task selection\n- Fill longest available time blocks first\n- List remaining tasks as unassigned\n\n## ID INCLUSION REQUIREMENTS (CRITICAL)\n\nYou MUST include entity IDs in your markdown output to enable downstream processing:\n\n### 1. Overview Section\nInclude project and goal IDs:\n```markdown\n**Project**: {projectName} (ID: {projectId})\n**Goal**: {goalName} (ID: {goalId})\n```\n\nExample: `**Project**: Learn Acoustic Guitar Basics (ID: 8cabba58-52fc-4bc1-b615-04de510dc0b0)`\n\n### 2. Workblock Headers\nInclude project and goal IDs for each block:\n```markdown\n- **Project**: {projectName} (ID: {projectId})\n- **Goal**: {goalName} (ID: {goalId})\n```\n\n### 3. Task Entries\nInclude task ID for EVERY task:\n```markdown\n**{taskName}** (ID: {taskId})\n```\n\nExample: `**Watch JustinGuitar Beginner Course videos 1-3** (ID: 1243d929-e1df-49ea-bd8b-d05372ef667c)`\n\nThe task ID comes from the `id` field in the enriched_tasks data.\n\n### 4. Unassigned Tasks\nAlso include task IDs for unassigned tasks (same format as scheduled tasks).\n\n**IMPORTANT**: Extract all IDs from the input JSON data and include them exactly as provided. These IDs are essential for knowledge base queries and context retrieval in downstream agents.\n\n## FEEDBACK INTERPRETATION GUIDELINES (Revision Mode Only)\n\nWhen `UserFeedback` is present, interpret common feedback patterns:\n\n- \"Too much X\" → Reduce X tasks or break them into smaller blocks\n- \"Not enough Y\" → Prioritize Y tasks or allocate more time\n- \"Wrong timing\" → Move tasks to preferred time slots\n- \"Missing project Z\" → Ensure project Z gets representation\n- \"Too packed/intense\" → Add buffer time or reduce task density\n- \"Prefer mornings/afternoons\" → Shift task types to preferred windows\n- \"Task A before Task B\" → Reorder tasks respecting dependencies\n- \"Don't like combined blocks\" → Create more focused single-task blocks\n\n## OUTPUT FORMAT\n\n**IMPORTANT**: Your output must be a JSON object with two fields:\n1. `schedule_proposal` - Valid markdown text that will be sent to Discord for human review\n2. `proposed_task_ids` - Array of task IDs (UUID strings) for all tasks included in the \"Scheduled Work Blocks\" section\n\nUse clear markdown formatting that's easy to scan and approve.\n\n### JSON Structure:\n{\n  \"schedule_proposal\": \"# 📅 Daily Schedule Proposal\\n\\n[Full markdown content here]\",\n  \"proposed_task_ids\": [\"uuid-string-1\", \"uuid-string-2\", \"uuid-string-3\"]\n}\n\nThe `proposed_task_ids` array must include the task IDs (from the `id` field in enriched_tasks) for every task that appears in the \"Scheduled Work Blocks\" section, in the order they appear in the schedule.\n\n### Initial Planning Mode Output Structure:\n```markdown\n# 📅 Daily Schedule Proposal\n\n## Overview\n- **Total schedulable tasks**: X\n- **Active projects**: Y\n- **Available time**: Z hours\n\n## Scheduled Work Blocks\n\n### 10:00 AM - 11:00 AM (1 hour)\n- **Project**: {projectName} (ID: {projectId})\n- **Goal**: {goalName} (ID: {goalId})\n\n**{taskName}** (ID: {taskId})\n{description}\n⏱️ {timeEstimate} minutes | 🎯 {priority}\n\n### [Additional blocks...]\n\n## Unassigned Tasks\n**{taskName}** (ID: {taskId})\n{description}\n⏱️ {timeEstimate} minutes | 🎯 {priority}\n\n---\n✅ Approve or ❌ Reject with feedback\n```\n\n### Revision Mode Output Structure:\n```markdown\n# 🔄 Revised Daily Schedule Proposal\n\n## Revision Summary\n**Changes Made**:\n- [List specific changes addressing feedback]\n- [Explain reasoning for adjustments]\n\n## Scheduled Work Blocks\n[Same format as Initial Planning Mode]\n\n## Unassigned Tasks\n[Same format as Initial Planning Mode]\n\n---\n✅ Approve or ❌ Reject with additional feedback\n```\n\n**Note**: Return a complete JSON object with both `schedule_proposal` (markdown content) and `proposed_task_ids` (array of scheduled task IDs) fields for downstream processing.\n\n## REVISION PRIORITIES (when UserFeedback is present)\n\n1. Address ALL specific feedback points from the human\n2. Maintain scheduling rules compliance where possible\n3. Preserve any aspects the human didn't object to\n4. Explain changes made in the revision summary\n5. **Always include all entity IDs** (projects, goals, tasks) using (ID: ...) format\n\n---\n\n**Remember**: Always include (ID: ...) annotations for all projects, goals, and tasks in your output, regardless of whether you're creating an initial proposal or a revision.\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[2544,160],"id":"98032e9a-b635-410c-aabc-7bb818fde0c2","name":"Scheduler Planner Agent","retryOnFail":true,"maxTries":2},{"parameters":{"jsCode":"return { \"already_scheduled\": $input.all() };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2592,-288],"id":"e9d3cdad-d21d-4c10-8ea0-f9224235c20a","name":"Repackage JSON"},{"parameters":{"assignments":{"assignments":[{"id":"e1149c46-0a5e-455d-8541-208485656022","name":"userFeedback","value":"={{ $json.body.feedback }}","type":"string"},{"id":"04246e40-8511-44a1-854f-c6f2bd023459","name":"sessionId","value":"={{ $('Nest Into 1 Head Key-Value JSON').first().json.sessionId }}","type":"string"},{"id":"b0609e9b-cb4d-4b78-ad99-a8215cb2d1b8","name":"enriched_tasks","value":"={{ $('Nest Into 1 Head Key-Value JSON').first().json.enriched_tasks }}","type":"string"},{"id":"148a0e18-85bc-4aa9-bffc-af7e0009dbde","name":"already_scheduled","value":"={{ $('Nest Into 1 Head Key-Value JSON').first().json.already_scheduled }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[3344,160],"id":"39df6068-50a2-4475-a23e-aab126452f8a","name":"Remap HITL Reject Response"},{"parameters":{"operation":"executeQuery","query":"UPDATE tasks\nSET status = 'Active'::task_status\nWHERE id IN ({{ JSON.parse($('Scheduler Planner Agent').first().json.output).proposed_task_ids.map(id => `'${id}'`).join(\", \") }})\nRETURNING id::text AS \"Updated Task Id\", \n          name AS \"Task Name\", \n          status::text AS \"New Status\", \n          updated_at AS \"Updated At\";","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[3344,-16],"id":"4f724494-2c7f-4004-9fb6-aa92aa1de841","name":"Update Tasks to Active","credentials":{"postgres":{"id":"5F055CeN7hFwfSH4","name":"Postgres account"}}},{"parameters":{"isBodyHtml":true,"subject":"={{ $json.subject }}","body":"={{ $json.body }}","fromEmail":"n8n-agent@retanatech.com","toAddresses":["alex.retana@live.com"],"additionalFields":{}},"type":"n8n-nodes-base.awsSes","typeVersion":1,"position":[3312,912],"id":"95b6c467-1114-44d0-a7b3-a576db21db40","name":"Send an email","credentials":{"aws":{"id":"ZvuZw2VqUlafdyW5","name":"AWS account"}}}],"connections":{"Get Today Events":{"main":[[{"node":"Repackage JSON","type":"main","index":0}]]},"Merge Data":{"main":[[{"node":"Nest Into 1 Head Key-Value JSON","type":"main","index":0}]]},"Nest Into 1 Head Key-Value JSON":{"main":[[{"node":"Scheduler Planner Agent","type":"main","index":0}]]},"Check Approval":{"main":[[{"node":"Add SessionId1","type":"main","index":0},{"node":"Update Tasks to Active","type":"main","index":0}],[{"node":"Remap HITL Reject Response","type":"main","index":0}]]},"Wait":{"main":[[{"node":"Check Approval","type":"main","index":0}]]},"Discord-Bot Initiate HITL":{"main":[[{"node":"Wait","type":"main","index":0}]]},"Query Active Projects":{"main":[[{"node":"Inner Join Project/Goals","type":"main","index":0}]]},"Query Unfinished Goals":{"main":[[{"node":"Inner Join Project/Goals","type":"main","index":1}]]},"Extract Goal IDs for Task Query":{"main":[[{"node":"Query Tasks for Active Project Goals","type":"main","index":0}]]},"Query Tasks for Active Project Goals":{"main":[[{"node":"Parse/Map Tasks Results","type":"main","index":0}]]},"Inner Join Project/Goals":{"main":[[{"node":"Extract Goal IDs for Task Query","type":"main","index":0}]]},"Parse/Map Tasks Results":{"main":[[{"node":"Merge Data","type":"main","index":0}]]},"x-ai/grok-4-fast:paid":{"ai_languageModel":[[{"node":"Scheduler Planner Agent","type":"ai_languageModel","index":0},{"node":"Tasks Background Enrichment Agent1","type":"ai_languageModel","index":0}]]},"claude-sonnet-4.5":{"ai_languageModel":[[{"node":"Scheduler Planner Agent","type":"ai_languageModel","index":1},{"node":"Tasks Background Enrichment Agent1","type":"ai_languageModel","index":1}]]},"Webhook":{"main":[[{"node":"Query Active Projects","type":"main","index":0},{"node":"Query Unfinished Goals","type":"main","index":0},{"node":"Get Today Events","type":"main","index":0}]]},"Schedule Trigger":{"main":[[{"node":"Get Today Events","type":"main","index":0},{"node":"Query Active Projects","type":"main","index":0},{"node":"Query Unfinished Goals","type":"main","index":0}]]},"Loop Over Items1":{"main":[[],[{"node":"Create an event1","type":"main","index":0}]]},"Create an event1":{"main":[[{"node":"Loop Over Items1","type":"main","index":0}]]},"Code in JavaScript1":{"main":[[{"node":"Send an email","type":"main","index":0}]]},"Tasks Background Enrichment Agent1":{"main":[[{"node":"Parse Output to Object1","type":"main","index":0}]]},"Call 'Event Horizon Archivist Agent'1":{"ai_tool":[[{"node":"Tasks Background Enrichment Agent1","type":"ai_tool","index":0}]]},"Parse Output to Object1":{"main":[[{"node":"Code in JavaScript1","type":"main","index":0},{"node":"Split Out","type":"main","index":0}]]},"Redis Chat Memory":{"ai_memory":[[{"node":"Tasks Background Enrichment Agent1","type":"ai_memory","index":0},{"node":"Scheduler Planner Agent","type":"ai_memory","index":0}]]},"Add SessionId1":{"main":[[{"node":"Tasks Background Enrichment Agent1","type":"main","index":0}]]},"Split Out":{"main":[[{"node":"Loop Over Items1","type":"main","index":0}]]},"Scheduler Planner Agent":{"main":[[{"node":"Discord-Bot Initiate HITL","type":"main","index":0}]]},"Repackage JSON":{"main":[[{"node":"Merge Data","type":"main","index":1}]]},"Remap HITL Reject Response":{"main":[[{"node":"Scheduler Planner Agent","type":"main","index":0}]]}},"settings":{},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[]},"global":{"sessionId":"2025-10-12T08:00:06.425-04:00"}},"meta":{"templateCredsSetupCompleted":true},"pinData":{"Webhook":[{"json":{"headers":{"host":"localhost:5678","user-agent":"curl/8.4.0","accept":"*/*"},"params":{},"query":{},"body":{},"webhookUrl":"http://localhost:5678/webhook/cdade82b-49fb-42a1-997f-a7675fdd034a","executionMode":"production"}}],"Schedule Trigger":[{"json":{"timestamp":"2025-10-22T08:00:04.026-04:00","Readable date":"October 22nd 2025, 8:00:04 am","Readable time":"8:00:04 am","Day of week":"Wednesday","Year":"2025","Month":"October","Day of month":"22","Hour":"08","Minute":"00","Second":"04","Timezone":"America/New_York (UTC-04:00)"}}]},"versionId":"9d9f0a28-0704-4fbe-abe9-a505e3bbff9c","triggerCount":2,"tags":[],"shared":[{"createdAt":"2025-10-21T19:32:49.374Z","updatedAt":"2025-10-21T19:32:49.374Z","role":"workflow:owner","workflowId":"MQMBf1LwZbZnw74e","projectId":"MVbajXNJ417wnMcp","project":{"createdAt":"2025-10-21T19:32:19.498Z","updatedAt":"2025-10-21T20:21:39.382Z","id":"MVbajXNJ417wnMcp","name":"Alexander Retana <alex.retana@live.com>","type":"personal","icon":null,"description":null}}]}]