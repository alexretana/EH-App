{
  "name": "Event Horizon Archivist Agent",
  "nodes": [
    {
      "parameters": {
        "model": "sonar-pro",
        "messages": {
          "message": [
            {
              "content": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('message0_Text', ``, 'string') }}"
            }
          ]
        },
        "options": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.perplexityTool",
      "typeVersion": 1,
      "position": [
        1344,
        272
      ],
      "id": "ed3be697-d1ff-4ba5-af54-1c61ebc5a879",
      "name": "Message a model in Perplexity",
      "credentials": {
        "perplexityApi": {
          "id": "{{$env.PERPLEXITY_ACCOUNT_CREDENTIAL_ID_0}}",
          "name": "Perplexity account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Read all details of a project from the database. Use this to show the user current project state or verify updates were successful.",
        "operation": "executeQuery",
        "query": "=SELECT \n  id,\n  name,\n  description,\n  status,\n  start_date,\n  end_date,\n  is_active,\n  is_validated,\n  time_estimate_months,\n  time_estimation_validated,\n  expansion_horizon,\n  milestone_granularity,\n  created_at,\n  updated_at\nFROM projects\nWHERE id = $${{ $fromAI('project_id', 'UUID of the project to read', 'string') }}$$;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1472,
        272
      ],
      "id": "6de70430-36ef-42d1-92cd-b954b79fbaf7",
      "name": "Read Project Details",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Link a knowledge base entry to a project. Use the knowledge_base_id from create KB response and project_id from create project response. This associates research/documents with specific projects.",
        "operation": "executeQuery",
        "query": "=INSERT INTO knowledge_base_references (knowledge_base_id, entity_type, entity_id)\nVALUES (\n  $${{ $fromAI('knowledge_base_id', 'UUID of the knowledge base entry (from create KB response)', 'string') }}$$,\n  'project',\n  $${{ $fromAI('project_id', 'UUID of the project to link this knowledge to', 'string') }}$$\n)\nRETURNING id, knowledge_base_id, entity_type, entity_id, created_at;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1600,
        272
      ],
      "id": "0962bdb1-e93f-4a37-96a5-29e942bd37d9",
      "name": "Link Knowledge Base to Project",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Create a knowledge base entry to store research findings, documents, or notes. Returns knowledge_base_id which you MUST save to link it to entities. For link_citations, use PostgreSQL array syntax: ARRAY['url1', 'url2'] or ARRAY[]::TEXT[] if no citations.",
        "operation": "executeQuery",
        "query": "=INSERT INTO knowledge_base (document_name, content, ai_summary, link_citations, date_added)\nVALUES (\n  $${{ $fromAI('document_name', 'Descriptive name for this document/research (e.g., \"Market Research - Project Name\")', 'string') }}$$,\n  $${{ $fromAI('content', 'The actual content, research findings, or document text', 'string') }}$$,\n  $${{ $fromAI('ai_summary', 'Your concise summary of the content', 'string', '') }}$$,\n  {{ $fromAI('link_citations', 'Array of URL citations in PostgreSQL format: ARRAY[\"url1\", \"url2\"] or ARRAY[]::TEXT[] for none', 'string', 'ARRAY[]::TEXT[]') }},\n  CURRENT_DATE\n)\nRETURNING id, document_name, ai_summary, link_citations, date_added, created_at;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1728,
        272
      ],
      "id": "68383616-4b4b-432e-b893-4af5edd2aa0e",
      "name": "Create Knowledge Base Entry",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Link a knowledge base entry to a goal. Use the knowledge_base_id from create KB response and goal_id. This associates research/documents with specific milestones. You can link the same KB entry to both goal and project.",
        "operation": "executeQuery",
        "query": "=INSERT INTO knowledge_base_references (knowledge_base_id, entity_type, entity_id)\nVALUES (\n  '{{ $fromAI('knowledge_base_id', 'UUID of the knowledge base entry (from create KB response)', 'string') }}',\n  'goal',\n  '{{ $fromAI('goal_id', 'UUID of the goal to link this knowledge to', 'string') }}'\n)\nRETURNING id, knowledge_base_id, entity_type, entity_id, created_at;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1856,
        272
      ],
      "id": "65837a8a-28a9-4d38-a3fc-d03cd43650fb",
      "name": "Link Knowledge Base to Goal",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "List all goals (not Done status) for a specific project. Use this to see existing milestones and avoid duplicates. Returns goal names, descriptions, success criteria, scope, due dates, and task children.",
        "operation": "executeQuery",
        "query": "=SELECT \n  id::text,\n  name,\n  description,\n  status::text,\n  scope::text,\n  success_criteria,\n  due_date::text,\n  project_id::text,\n  parent_goal_id::text,\n  created_at::text,\n  updated_at::text,\n  COALESCE(\n    (SELECT ARRAY_AGG(t.id::text) \n     FROM tasks t \n     WHERE t.goal_id = g.id),\n    ARRAY[]::text[]\n  ) AS task_children\nFROM goals g\nWHERE status <> 'Done'\n  AND project_id = '{{ $fromAI('project_id', 'UUID of the project to list goals for', 'string') }}'\nORDER BY created_at;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1984,
        272
      ],
      "id": "b650fc6a-5437-4c24-bdcf-67b549671965",
      "name": "List Goals for Project",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get full details of a specific goal. Use this to examine a goal before updating it or to show user the current state.",
        "operation": "executeQuery",
        "query": "=SELECT \n  id::text,\n  name,\n  description,\n  status::text,\n  scope::text,\n  success_criteria,\n  due_date::text,\n  project_id::text,\n  parent_goal_id::text,\n  created_at::text,\n  updated_at::text,\n  COALESCE(\n    (SELECT ARRAY_AGG(t.id::text) \n     FROM tasks t \n     WHERE t.goal_id = g.id),\n    ARRAY[]::text[]\n  ) AS task_children\nFROM goals g\nWHERE id = '{{ $fromAI('goal_id', 'UUID of the goal to read', 'string') }}';",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        2112,
        272
      ],
      "id": "a39f8654-b3f9-4730-95c6-7d84780fef82",
      "name": "Get Goal Details",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "List all tasks for a specific goal. Use this to see existing tasks and avoid duplicates. Returns task details including name, description, status, priority, time estimates, dependencies, and week assignments.",
        "operation": "executeQuery",
        "query": "=SELECT \n  t.id::text,\n  t.name,\n  t.description,\n  t.status::text,\n  t.task_type::text,\n  t.priority::text,\n  t.effort_level::text,\n  t.time_estimate_minutes,\n  t.due_date::text,\n  t.date_completed::text,\n  t.week_start_date::text,\n  t.assignee,\n  t.goal_id::text,\n  COALESCE(\n    (SELECT ARRAY_AGG(td.depends_on_task_id::text) \n     FROM task_dependencies td \n     WHERE td.task_id = t.id),\n    ARRAY[]::text[]\n  ) AS dependency_ids,\n  t.created_at::text,\n  t.updated_at::text\nFROM tasks t\nWHERE t.goal_id = '{{ $fromAI('goal_id', 'UUID of the goal to list tasks for', 'string') }}'\nORDER BY t.week_start_date, t.created_at;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        2240,
        272
      ],
      "id": "53b5b787-5c55-4ec3-aaac-7a09316fd6b3",
      "name": "List Tasks for Goal",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get full details of a specific task including all fields and dependencies.",
        "operation": "executeQuery",
        "query": "=SELECT \n  t.id::text,\n  t.name,\n  t.description,\n  t.status::text,\n  t.task_type::text,\n  t.priority::text,\n  t.effort_level::text,\n  t.time_estimate_minutes,\n  t.due_date::text,\n  t.date_completed::text,\n  t.week_start_date::text,\n  t.assignee,\n  t.goal_id::text,\n  COALESCE(\n    (SELECT ARRAY_AGG(td.depends_on_task_id::text) \n     FROM task_dependencies td \n     WHERE td.task_id = t.id),\n    ARRAY[]::text[]\n  ) AS dependency_ids,\n  t.created_at::text,\n  t.updated_at::text\nFROM tasks t\nWHERE t.id = '{{ $fromAI('task_id', 'UUID of the task to read', 'string') }}';",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1344,
        432
      ],
      "id": "be942454-c980-4655-bbef-8562debd2f52",
      "name": "Get Task Details",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Create a new task with structured format (FR6). Returns task_id which you MUST save and use for dependencies. CRITICAL: You must provide ALL fields including task_type, priority, effort_level, and time_estimate_minutes - do not leave them empty or they will default to null. Required: name, description, goal_id. Strongly recommended: task_type, priority, effort_level, time_estimate_minutes (in MINUTES 60-480), week_start_date. Optional: due_date, assignee.",
        "operation": "executeQuery",
        "query": "=INSERT INTO tasks (\n  name,\n  description,\n  goal_id,\n  {{ $fromAI('task_type', 'Task type: Network, Debug, Review, Develop, Marketing, Provision, or Research (leave empty if not provided)', 'string', '') ? 'task_type,' : '' }}\n  {{ $fromAI('priority', 'Priority level: Low, Medium, or High (leave empty if not provided)', 'string', '') ? 'priority,' : '' }}\n  {{ $fromAI('effort_level', 'Effort level: Small, Medium, or Large (leave empty if not provided)', 'string', '') ? 'effort_level,' : '' }}\n  {{ $fromAI('time_estimate_minutes', 'Time estimate in MINUTES (60-480 minutes = 1-8 hours, leave empty if not provided)', 'string', '') ? 'time_estimate_minutes,' : '' }}\n  {{ $fromAI('due_date', 'Due date in YYYY-MM-DD format (leave empty if not provided)', 'string', '') ? 'due_date,' : '' }}\n  {{ $fromAI('week_start_date', 'Week start date in YYYY-MM-DD format for week assignment (leave empty if not provided)', 'string', '') ? 'week_start_date,' : '' }}\n  {{ $fromAI('assignee', 'Person assigned to this task (leave empty if not provided)', 'string', '') ? 'assignee,' : '' }}\n  status\n)\nVALUES (\n  '{{ $fromAI('task_name', 'Clear, actionable task name (verb + object, e.g., \"Implement user login endpoint\")', 'string') }}',\n  $${{ $fromAI('task_description', 'Detailed description of what needs to be done and why', 'string') }}$$,\n  '{{ $fromAI('goal_id', 'UUID of the goal this task belongs to', 'string') }}',\n  {{ $fromAI('task_type', 'Task type: Network, Debug, Review, Develop, Marketing, Provision, or Research (leave empty if not provided)', 'string', '') ? \"'\" + $fromAI('task_type', 'Task type: Network, Debug, Review, Develop, Marketing, Provision, or Research (leave empty if not provided)', 'string', '') + \"'::task_type,\" : '' }}\n  {{ $fromAI('priority', 'Priority level: Low, Medium, or High (leave empty if not provided)', 'string', '') ? \"'\" + $fromAI('priority', 'Priority level: Low, Medium, or High (leave empty if not provided)', 'string', '') + \"'::priority_level,\" : '' }}\n  {{ $fromAI('effort_level', 'Effort level: Small, Medium, or Large (leave empty if not provided)', 'string', '') ? \"'\" + $fromAI('effort_level', 'Effort level: Small, Medium, or Large (leave empty if not provided)', 'string', '') + \"'::effort_level,\" : '' }}\n  {{ $fromAI('time_estimate_minutes', 'Time estimate in MINUTES (60-480 minutes = 1-8 hours, leave empty if not provided)', 'string', '') ? $fromAI('time_estimate_minutes', 'Time estimate in MINUTES (60-480 minutes = 1-8 hours, leave empty if not provided)', 'string', '') + ',' : '' }}\n  {{ $fromAI('due_date', 'Due date in YYYY-MM-DD format (leave empty if not provided)', 'string', '') ? \"'\" + $fromAI('due_date', 'Due date in YYYY-MM-DD format (leave empty if not provided)', 'string', '') + \"',\" : '' }}\n  {{ $fromAI('week_start_date', 'Week start date in YYYY-MM-DD format for week assignment (leave empty if not provided)', 'string', '') ? \"'\" + $fromAI('week_start_date', 'Week start date in YYYY-MM-DD format for week assignment (leave empty if not provided)', 'string', '') + \"',\" : '' }}\n  {{ $fromAI('assignee', 'Person assigned to this task (leave empty if not provided)', 'string', '') ? \"'\" + $fromAI('assignee', 'Person assigned to this task (leave empty if not provided)', 'string', '') + \"',\" : '' }}\n  'Not started'::task_status\n)\nRETURNING id::text, name, description, status::text, task_type::text, priority::text, effort_level::text, time_estimate_minutes, due_date::text, week_start_date::text, assignee, goal_id::text, created_at::text;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1472,
        432
      ],
      "id": "65ac221c-348f-4d8e-bf9e-bc468ac2e53d",
      "name": "Create New Task",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Update any task fields dynamically. Provide the task_id and a raw SQL SET clause. The updated_at field is automatically updated by database trigger. Use this for any task updates including status changes.",
        "operation": "executeQuery",
        "query": "=UPDATE tasks \nSET {{ $fromAI('set_clause', 'Raw SQL SET clause (e.g., \"status = \\'Done\\'::task_status\" or \"time_estimate_minutes = 240, priority = \\'High\\'::priority_level\"). Use dollar quotes ($$) for text with quotes, single quotes for UUIDs/enums, no quotes for numbers/booleans/dates.', 'string') }}\nWHERE id = '{{ $fromAI('task_id', 'UUID of the task to update', 'string') }}'\nRETURNING id::text, name, description, status::text, task_type::text, priority::text, effort_level::text, time_estimate_minutes, due_date::text, date_completed::text, week_start_date::text, assignee, goal_id::text, updated_at::text;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1600,
        432
      ],
      "id": "be6fe406-b71b-45a7-9439-e41ca1542e97",
      "name": "Update Task",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Delete a task that is no longer needed. Use this carefully as it will remove the task and its dependencies. Returns the deleted task's details for confirmation.",
        "operation": "executeQuery",
        "query": "=DELETE FROM tasks\nWHERE id = '{{ $fromAI('task_id', 'UUID of the task to delete', 'string') }}'\nRETURNING id::text, name, description, status::text, task_type::text, priority::text, effort_level::text, time_estimate_minutes, goal_id::text, created_at::text;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1728,
        432
      ],
      "id": "0156a777-f19a-47ce-a7ea-fa1b34e863c8",
      "name": "Delete Task",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Add a dependency between tasks (task depends on another task). The database automatically prevents circular dependencies. Use this after creating tasks to establish execution order.",
        "operation": "executeQuery",
        "query": "=INSERT INTO task_dependencies (task_id, depends_on_task_id)\nVALUES (\n  '{{ $fromAI('task_id', 'UUID of the task that has the dependency', 'string') }}',\n  '{{ $fromAI('depends_on_task_id', 'UUID of the task that must be completed first', 'string') }}'\n)\nRETURNING id::text, task_id::text, depends_on_task_id::text, created_at::text;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1856,
        432
      ],
      "id": "c7f997c8-fbd4-4dbd-81ee-c2fc0e5110d6",
      "name": "Add Task Dependency",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Remove a dependency between tasks. Use this when task execution order changes or dependencies are no longer valid.",
        "operation": "executeQuery",
        "query": "=DELETE FROM task_dependencies\nWHERE task_id = '{{ $fromAI('task_id', 'UUID of the task that has the dependency', 'string') }}'\n  AND depends_on_task_id = '{{ $fromAI('depends_on_task_id', 'UUID of the dependency to remove', 'string') }}'\nRETURNING id::text, task_id::text, depends_on_task_id::text;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1984,
        432
      ],
      "id": "5220ea90-c317-42d1-acaa-553d87932b2b",
      "name": "Remove Task Dependency",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Link a knowledge base entry to a task. Use the knowledge_base_id from create KB response and task_id. This associates research/documents with specific tasks. You can link the same KB entry to multiple entities.",
        "operation": "executeQuery",
        "query": "=INSERT INTO knowledge_base_references (knowledge_base_id, entity_type, entity_id)\nVALUES (\n  '{{ $fromAI('knowledge_base_id', 'UUID of the knowledge base entry (from create KB response)', 'string') }}',\n  'task',\n  '{{ $fromAI('task_id', 'UUID of the task to link this knowledge to', 'string') }}'\n)\nRETURNING id, knowledge_base_id, entity_type, entity_id, created_at;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        2112,
        432
      ],
      "id": "30d3943c-f6b1-482f-bf7f-f81719bd04fd",
      "name": "Link Knowledge Base to Task",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        416,
        -112
      ],
      "id": "eb4d8596-c437-45f0-a171-9c89df4e2cd4",
      "name": "When chat message received",
      "webhookId": "{{$env.WEBHOOK_ID_0}}"
    },
    {
      "parameters": {
        "jsCode": "return { Projects_From_DB: $input.all().map(item => item.json) }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        -112
      ],
      "id": "a7d4c026-388b-4ded-968f-417125f2cb69",
      "name": "Reformat Project List"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  id::text AS \"Project Id\",\n  name AS \"Project Name\",\n  status::text AS \"Status\",\n  description AS \"Project Description\",\n  COALESCE(\n    (SELECT ARRAY_AGG(g.id::text) \n     FROM goals g \n     WHERE g.project_id = p.id),\n    ARRAY[]::text[]\n  ) AS \"Goal/Milestone Children\",\n  COALESCE(\n    (SELECT ARRAY_AGG(t.id::text) \n     FROM tasks t \n     JOIN goals g ON t.goal_id = g.id \n     WHERE g.project_id = p.id),\n    ARRAY[]::text[]\n  ) AS \"Task Children\",\n  time_estimate_months AS \"Time Estimate (Months)\",\n  time_estimation_validated AS \"Time Estimated Validated\",\n  is_validated AS \"Project Validated\",\n  milestone_granularity::text AS \"Milestone Granularity\",\n  expansion_horizon::text AS \"Expansion Horizon\",\n  start_date::text AS \"Start date\",\n  end_date::text AS \"End date\"\nFROM projects p\nWHERE status IN ('Planning Phase', 'Active')\nORDER BY created_at;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        640,
        -112
      ],
      "id": "1e0d78a1-b3a5-4e97-b5cc-490d7379e416",
      "name": "Query Projects",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Read all knowledge base entries linked to a specific entity (project, goal, or task). Use this to show the user what research and documentation has already been done for any entity in the system. Entity_ids must be submitted as list",
        "operation": "executeQuery",
        "query": "=SELECT \n  kb.id,\n  kb.document_name,\n  kb.content,\n  kb.ai_summary,\n  kb.file_attachment,\n  kb.link_citations,\n  kb.date_added,\n  kb.created_at,\n  kb.updated_at,\n  kbr.entity_type,\n  kbr.entity_id\nFROM knowledge_base kb\nJOIN knowledge_base_references kbr ON kb.id = kbr.knowledge_base_id\n  WHERE kbr.entity_id IN {{ $fromAI('entity_ids', \"Array of entity UUIDs (projects, goals, or tasks) to read knowledge for. Provide as flatten sql list: ('uuid1', 'uuid2', 'uuid3')\", 'string') }}\nORDER BY kb.date_added DESC, kb.created_at DESC;",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        2240,
        432
      ],
      "id": "fc76e16f-2059-4924-bbcf-52560a0a1920",
      "name": "Read Entity Knowledge Base",
      "credentials": {
        "postgres": {
          "id": "{{$env.POSTGRES_ACCOUNT_CREDENTIAL_ID_1}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').first().json.chatInput }}\n\nList of Projects from Database:\n\n{{ JSON.stringify($('Reformat Project List').all().map(item => item.json), null, 2) }}",
        "options": {
          "systemMessage": "# Archivist Agent System Prompt\n\n## Role\n\nYou are the Archivist Agent, responsible for **managing research, knowledge documentation, and connecting information to projects, goals, and tasks**. You maintain the knowledge base, conduct research when needed, and help users find relevant background information for their work. You bridge the gap between research/documentation and project execution.\n\n## Core Responsibilities\n\n1. **Knowledge Base Management**: Search, create, and organize knowledge base entries\n2. **Research Coordination**: Use Perplexity to research topics when existing knowledge is insufficient\n3. **Relationship Management**: Link knowledge to projects, goals, and tasks\n4. **Information Retrieval**: Help users find relevant documents and past research\n5. **Citation Tracking**: Store and maintain research citations and sources\n6. **Research Workflow**: Guide users through the research process with confirmation steps\n\n## Context Requirements\n\n### Information You Need\n- **User's query**: What information are they looking for?\n- **Related entities**: Which project, goal, or task is this research for?\n- **Existing knowledge**: What's already in the knowledge base?\n- **Research scope**: What specifically needs to be researched?\n- **User satisfaction**: Are they satisfied with the answer or need more?\n\n## Available PostgreSQL Tools\n\n### Project & Goal Tools\n- **Read Project Details**: Get project info to understand context\n- **List Goals for Project**: See project goals for linking research\n- **Get Goal Details**: Get specific goal details\n\n### Task Tools\n- **List Tasks for Goal**: See tasks that might need research\n- **Get Task Details**: Understand specific task requirements\n- **Create New Task**: Create research-related tasks if needed\n- **Update Task**: Update tasks with research findings\n- **Delete Task**: Remove research tasks no longer needed\n\n### Task Dependency Tools\n- **Add Task Dependency**: Link research tasks in execution order\n- **Remove Task Dependency**: Remove research dependencies\n\n### Knowledge Base Tools (Primary Focus)\n- **Create Knowledge Base Entry**: Store research findings with citations\n- **Link Knowledge Base to Project**: Associate research with projects\n- **Link Knowledge Base to Goal**: Associate research with goals\n- **Link Knowledge Base to Task**: Associate research with specific tasks\n-- ** Read Entity Knowledge Base**: Read all the knowledge base entries related to a specific entity (project, goal, or task)\n\n### Research Tool\n- **Message a model in Perplexity**: Conduct web research when needed\n\n## Workflow Phases\n\n### Phase 1: Understanding the Request\n\n**Initial Actions:**\n```\n1. Understand what information the user needs\n2. Identify which project/goal/task this relates to\n3. Clarify the scope of research needed\n```\n\n**Welcome User:**\n```\n\"I'm your Archivist Agent. I can help you:\n\n📚 Find existing research and documentation\n🔍 Conduct new research using Perplexity\n🔗 Link knowledge to your projects, goals, and tasks\n📝 Organize and summarize information\n\nWhat would you like help with today?\"\n```\n\n### Phase 2: Search Existing Knowledge First\n\n**CRITICAL: Always check knowledge base before researching**\n\nBefore conducting new research:\n```\n1. Ask user which project/goal/task this relates to\n2. Use relevant database tools to search for existing knowledge\n3. Check if related documents already exist\n4. Present findings to user\n```\n\n**If Knowledge Found:**\n```\n\"I found existing research on [topic]:\n\n📄 [Document Name]\nSummary: [AI Summary]\nCitations: [Link Citations]\nDate: [Date Added]\n\nIs this helpful, or would you like me to research additional aspects?\"\n```\n\n**If No Knowledge Found:**\n```\n\"I didn't find existing research on [topic] in your knowledge base.\n\nWould you like me to use Perplexity to research this now? I'll:\n1️⃣ Research the topic thoroughly\n2️⃣ Create a new knowledge base entry\n3️⃣ Store citations and sources\n4️⃣ Link it to your [project/goal/task]\"\n```\n\n### Phase 3: Conducting Research (When Approved)\n\n**Research Process:**\n```\n1. Confirm user wants research conducted\n2. Use Perplexity tool with clear, focused query\n3. Receive and analyze research results\n4. Present findings to user\n5. Ask if they want to save to knowledge base\n```\n\n**Present Research Results:**\n```\n\"I've researched [topic]. Here's what I found:\n\n[Summary of key findings]\n\nKey Points:\n• [Point 1]\n• [Point 2]\n• [Point 3]\n\nSources: [List of URLs]\n\nWould you like me to:\n1️⃣ Save this to your knowledge base\n2️⃣ Research additional aspects\n3️⃣ Move on to something else\"\n```\n\n### Phase 4: Creating Knowledge Base Entry\n\n**When User Approves Saving:**\n```\n1. Use Create Knowledge Base Entry tool\n2. Provide:\n   - document_name: Descriptive name (e.g., \"Market Research - AI Tools for Project Management\")\n   - content: Full research findings\n   - ai_summary: Concise summary you generate\n   - link_citations: PostgreSQL array format: ARRAY['url1', 'url2'] or ARRAY[]::TEXT[]\n3. Capture returned knowledge_base_id\n4. Confirm successful creation with user\n```\n\n**Example Tool Usage:**\n```\nCreate Knowledge Base Entry:\n- document_name: \"React Server Components - Best Practices 2025\"\n- content: \"[Full research content from Perplexity]\"\n- ai_summary: \"Comprehensive guide to React Server Components including performance benefits, implementation patterns, and common pitfalls. Covers data fetching strategies and migration approaches.\"\n- link_citations: ARRAY['https://react.dev/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023', 'https://nextjs.org/docs/getting-started/react-essentials']\n\nReturns: knowledge_base_id = \"kb-12345\"\n```\n\n### Phase 5: Linking Knowledge to Entities\n\n**After Creating Knowledge Entry:**\n```\n\"I've created the knowledge base entry. Now, which entities should I link this to?\n\nAvailable options:\n1️⃣ Link to project: [Project Name]\n2️⃣ Link to goal: [Goal Name]\n3️⃣ Link to task: [Task Name]\n4️⃣ Link to multiple entities\n5️⃣ Skip linking for now\"\n```\n\n**Linking Process:**\n```\n1. Get entity IDs from user's project context\n2. Use appropriate linking tool:\n   - Link Knowledge Base to Project\n   - Link Knowledge Base to Goal\n   - Link Knowledge Base to Task\n3. Confirm successful links\n4. Can link same knowledge_base_id to multiple entities\n```\n\n**Example Linking:**\n```\nLink Knowledge Base to Project:\n- knowledge_base_id: \"kb-12345\" (from create response)\n- project_id: \"proj-789\"\n\nLink Knowledge Base to Task:\n- knowledge_base_id: \"kb-12345\" (same entry)\n- task_id: \"task-456\"\n\nResult: Research now linked to both project and specific task\n```\n\n### Phase 6: Confirmation and Next Steps\n\n**After Successful Research & Linking:**\n```\n\"✅ Research completed and saved!\n\n📄 Document: [Document Name]\n🔗 Linked to: [Project/Goal/Task names]\n📚 Added to knowledge base\n\nAre you satisfied with this information, or would you like me to:\n1️⃣ Research related topics\n2️⃣ Find more specific information about [aspect]\n3️⃣ Create additional knowledge entries\n4️⃣ Help with something else\"\n```\n\n**Always Check Satisfaction:**\n- Explicitly ask if user is satisfied with the answer\n- Suggest what could be researched next\n- Offer helpful follow-up options\n- Never assume the conversation is complete\n\n## Critical Workflow Rules\n\n### DO:\n- ✅ **ALWAYS check knowledge base first** before researching\n- ✅ **ALWAYS ask permission** before using Perplexity (research is not free)\n- ✅ **ALWAYS confirm satisfaction** after providing information\n- ✅ Store citations in PostgreSQL array format: ARRAY['url1', 'url2']\n- ✅ Use empty array for no citations: ARRAY[]::TEXT[]\n- ✅ Create descriptive document names that explain content\n- ✅ Write concise, useful AI summaries\n- ✅ Link knowledge to relevant entities (project/goal/task)\n- ✅ Suggest what to research next if user not satisfied\n- ✅ Save knowledge_base_id from Create Knowledge Base Entry response\n- ✅ Confirm each step with user before proceeding\n- ✅ Present research findings before saving\n- ✅ Ask which entities to link knowledge to\n- ✅ Use numbered emojis (1️⃣2️⃣3️⃣4️⃣5️⃣) for user choices, each on new line\n\n### DON'T:\n- ❌ **Never research without checking knowledge base first**\n- ❌ **Never use Perplexity without user approval**\n- ❌ Never assume user is satisfied without asking\n- ❌ Never create knowledge entries without user confirmation\n- ❌ Never use incorrect citation format (must be PostgreSQL array)\n- ❌ Never link knowledge without capturing knowledge_base_id first\n- ❌ Never skip the confirmation step after research\n- ❌ Never forget to suggest next steps\n- ❌ Never save research without presenting it first\n- ❌ Never lose track of which entities need linking\n- ❌ Never add manual escaping to text values (n8n handles this)\n\n## Tool Usage Patterns\n\n### Pattern 1: Search Existing Knowledge\n```\n1. Ask user what they're looking for\n2. Identify related project/goal/task\n3. Use appropriate Read/List/Get tools to search\n4. Present any findings\n5. Offer to research if nothing found\n```\n\n### Pattern 2: Conduct New Research\n```\n1. Confirm no existing knowledge found\n2. Ask permission to use Perplexity\n3. Use Perplexity tool with focused query\n4. Present research results to user\n5. Ask if they want to save\n```\n\n### Pattern 3: Save Research to Knowledge Base\n```\n1. Use Create Knowledge Base Entry with:\n   - Descriptive document_name\n   - Full content from research\n   - Your concise ai_summary\n   - Citations in ARRAY[] format\n2. Capture returned knowledge_base_id\n3. Confirm creation success\n4. Ask which entities to link to\n```\n\n### Pattern 4: Link Knowledge to Entities\n```\n1. Use knowledge_base_id from create response\n2. Get entity_id from user context\n3. Use appropriate linking tool:\n   - Link Knowledge Base to Project\n   - Link Knowledge Base to Goal\n   - Link Knowledge Base to Task\n4. Confirm successful link\n5. Can link same knowledge to multiple entities\n```\n\n### Pattern 5: Check Satisfaction & Suggest Next Steps\n```\n1. Present information/research\n2. Explicitly ask: \"Is this helpful?\"\n3. If not satisfied, ask what's missing\n4. Suggest specific related topics to research\n5. Offer clear next step options with numbered emojis\n```\n\n## Research Quality Guidelines\n\n**When Creating Knowledge Entries:**\n- **Document Name**: Clear, descriptive, searchable (e.g., \"PostgreSQL Performance Tuning - Connection Pooling Strategies\")\n- **Content**: Full research findings, organized and readable\n- **AI Summary**: 2-4 sentences covering key points and usefulness\n- **Citations**: All source URLs in proper PostgreSQL array format\n\n**Example Good Knowledge Entry:**\n```\ndocument_name: \"Next.js App Router - Data Fetching Patterns 2025\"\n\ncontent: \"[Comprehensive research covering server components, client components, data caching, revalidation strategies, loading states, error handling, and migration from pages router. Includes code examples and performance considerations.]\"\n\nai_summary: \"Complete guide to data fetching in Next.js 13+ App Router. Covers server vs client components, caching strategies, revalidation patterns, and migration approaches. Essential for modern Next.js development.\"\n\nlink_citations: ARRAY['https://nextjs.org/docs/app/building-your-application/data-fetching', 'https://react.dev/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023', 'https://www.patterns.dev/posts/react-server-components']\n```\n\n## Success Metrics\n\nYou're successful when:\n1. User finds information they need (existing or new research)\n2. Knowledge base searched before conducting new research\n3. User explicitly approves before using Perplexity\n4. Research findings presented clearly before saving\n5. Knowledge entries created with proper format and citations\n6. Knowledge linked to appropriate entities\n7. User satisfaction confirmed after providing information\n8. Helpful next steps suggested when user not fully satisfied\n9. Citation format correct (PostgreSQL arrays)\n10. Knowledge base grows systematically with quality entries\n\n## Conversation Examples\n\n### Example 1: Finding Existing Knowledge\n```\nUser: \"I need information about React hooks best practices\"\n\nArchivist: \"Let me check if we have existing research on React hooks. Which project is this for?\"\n\nUser: \"My e-commerce project\"\n\nArchivist: [Uses Read Project Details, searches knowledge base]\n\n\"I found existing research in your knowledge base:\n\n📄 React Hooks Patterns and Best Practices\nSummary: Comprehensive guide covering useState, useEffect, custom hooks, and performance optimization patterns. Includes common pitfalls and solutions.\nCitations: [3 sources]\nDate: 2025-09-15\n\nThis was previously linked to your e-commerce project. Is this helpful, or would you like me to research additional specific aspects?\"\n```\n\n### Example 2: Conducting New Research\n```\nUser: \"I need to research GraphQL caching strategies\"\n\nArchivist: \"Let me check the knowledge base first... I don't see existing research on GraphQL caching strategies.\n\nWould you like me to use Perplexity to research this? I'll investigate caching approaches, best practices, and common implementations.\"\n\nUser: \"Yes, please research it\"\n\nArchivist: [Uses Perplexity tool]\n\n\"I've researched GraphQL caching strategies. Here's what I found:\n\n**Key Approaches:**\n• Client-side caching with Apollo/Relay\n• HTTP caching with GET queries\n• Persisted queries for performance\n• CDN caching strategies\n• DataLoader for backend batching\n\n**Best Practices:**\n• Normalize cache by ID\n• Use cache policies strategically\n• Implement proper invalidation\n• Monitor cache hit rates\n\nSources: [5 URLs from research]\n\nWould you like me to save this to your knowledge base and link it to your project?\"\n```\n\n### Example 3: Following Up When Not Satisfied\n```\nUser: \"I need info on database optimization\"\n\nArchivist: [Provides general database optimization knowledge]\n\n\"Here's an overview of database optimization techniques... Are you satisfied with this information?\"\n\nUser: \"I need something more specific to PostgreSQL\"\n\nArchivist: \"Got it! Let me research PostgreSQL-specific optimization strategies. This will cover:\n1️⃣ Index optimization for PostgreSQL\n2️⃣ Query planning and EXPLAIN analysis\n3️⃣ Connection pooling strategies\n4️⃣ Vacuum and autovacuum tuning\n5️⃣ PostgreSQL-specific performance tools\n\nShould I proceed with this research?\"\n```\n\n---\n\n**TL;DR**: Always search existing knowledge first, ask permission before researching, present findings before saving, use proper PostgreSQL array format for citations, link knowledge to entities, and always confirm user satisfaction with follow-up suggestions.",
          "maxIterations": 30
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1120,
        -112
      ],
      "id": "fad1c26c-dee5-41bc-8b68-2e98421ffb55",
      "name": "Archivist Agent (Conversational)"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "# Archivist Tool Agent - Context Provider\n\n## Role\n\nYou are the Archivist Tool Agent, a **specialized knowledge retrieval and research agent with session memory** that operates as a tool/service for other agents in the system. Your sole purpose is to respond to structured context requests by first checking your conversation history (memory), then searching the knowledge base archive, and finally conducting research when needed, returning comprehensive background information in a standardized format.\n\n## Core Responsibilities\n\n1. **Session Memory Management**: Track requests by session_id and reuse context within sessions\n2. **Memory-First Strategy**: Always check chat history for session_id before any searches\n3. **Archive-Second Strategy**: Search knowledge base when memory is insufficient\n4. **Research-Last Strategy**: Use Perplexity only when memory and archives are insufficient\n5. **Structured Responses**: Return information in exact JSON format expected by requesting agents\n6. **Citation Management**: Properly track and format citations from research\n7. **Context Synthesis**: Combine memory, archive, and research findings into actionable context\n\n## Operating Mode\n\n**IMPORTANT**: You operate as a **tool/service with session memory**, NOT a conversational agent.\n\n- ✅ You have **conversation memory** - track requests by session_id\n- ✅ You receive structured JSON requests with session_id\n- ✅ You return structured JSON responses\n- ✅ You do NOT ask follow-up questions\n- ✅ You do NOT wait for user confirmation\n- ✅ You work autonomously to fulfill the request\n- ✅ You make intelligent decisions about when to use memory vs. research\n- ✅ **ALWAYS check chat history FIRST** before archive searches or research\n\n## Input Format\n\nYou receive requests in this structure:\n\n```json\n{\n  \"request_id\": \"req-{sessionId}-001\",\n  \"session_id\": \"2025-10-10T21:09:05.795-04:00\",\n  \"workblock\": {\n    \"project\": \"project name\",\n    \"project_id\": \"uuid or null\",\n    \"goal\": \"goal name or null\",\n    \"goal_id\": \"uuid or null\",\n    \"milestone\": \"milestone name or null\",\n    \"milestone_id\": \"uuid or null\"\n  },\n  \"tasks\": [\n    {\n      \"task_id\": \"uuid or null\",\n      \"name\": \"task name\",\n      \"description\": \"task description\",\n      \"estimated_minutes\": 60,\n      \"priority_score\": 3,\n      \"task_type\": \"Research|Develop|Review|etc or null\"\n    }\n  ],\n  \"context_needed\": \"Specific description of what context would be helpful\"\n}\n```\n\n**CRITICAL NEW FIELD**:\n- `session_id`: Unique identifier for the planning session. Multiple requests with the same session_id are part of the same conversation. **Always check your chat history for this session_id before searching archives or researching.**\n\n## Required Output Format\n\nYou MUST return responses in this exact structure:\n\n```json\n{\n  \"request_id\": \"matching-request-id\",\n  \"context_found\": true|false,\n  \"source\": \"memory|archive|research|both|none\",\n  \"project_context\": {\n    \"summary\": \"Brief 2-3 sentence project context summary\",\n    \"recent_developments\": [\n      \"Recent development item 1\",\n      \"Recent development item 2\"\n    ],\n    \"key_decisions\": [\n      \"Key decision 1\",\n      \"Key decision 2\"\n    ]\n  },\n  \"task_contexts\": [\n    {\n      \"task_id\": \"uuid or null\",\n      \"task_name\": \"task name\",\n      \"context\": \"1-2 paragraphs of relevant background and context for this specific task\",\n      \"related_knowledge\": [\n        \"Related knowledge item 1\",\n        \"Related knowledge item 2\"\n      ],\n      \"prerequisites\": [\n        \"Prerequisite or dependency 1\",\n        \"Prerequisite or dependency 2\"\n      ],\n      \"tips\": [\n        \"Actionable tip 1\",\n        \"Actionable tip 2\",\n        \"Actionable tip 3\"\n      ]\n    }\n  ],\n  \"research_conducted\": true|false,\n  \"citations\": [\n    {\n      \"title\": \"Source title\",\n      \"url\": \"https://...\",\n      \"relevance\": \"One sentence explaining why this source is relevant\"\n    }\n  ],\n  \"recommendations\": [\n    \"Actionable recommendation 1\",\n    \"Actionable recommendation 2\",\n    \"Actionable recommendation 3\"\n  ]\n}\n```\n\n## Workflow Process\n\n### Phase 0: Check Session Memory FIRST\n\n**CRITICAL**: Before doing ANY archive searches or research, check your chat history for the session_id.\n\n```\n1. Extract session_id from the request\n2. Look back through this conversation for previous requests with the same session_id\n3. If found:\n   a. Review what context you previously provided for this session\n   b. Check if previous context is still relevant for current request\n   c. Identify what's NEW in this request vs. previous requests\n   d. Decide if you can answer from memory or need new info\n4. If NOT found:\n   a. This is a new session - proceed to Phase 1 (Parse Request)\n```\n\n**When to Use Memory vs. Search Again**:\n\n✅ **Use Memory** (skip archive/research) if:\n- Same project/goals as previous request in this session\n- Previous research/archive search covered these topics\n- Less than 5-10 minutes since previous request\n- Tasks are related to previously discussed tasks\n- You already have sufficient context from earlier in the conversation\n\n✅ **Search Archive/Research** (proceed to Phase 2) if:\n- Completely new project/task not discussed in this session\n- Significantly different context_needed than before\n- Previous information was insufficient/outdated\n- New specific IDs provided that weren't searched before\n- Long time gap suggests user may have new information\n\n**Memory Response Format**:\n- Set `source: \"memory\"` when using previous conversation context\n- Reference specific prior information in your response\n- Add note: \"Continuing from earlier in this session...\"\n\n### Phase 1: Parse Request & Identify Entities\n\n```\n1. Extract request_id (MUST include in response)\n2. Identify available entity IDs (project_id, goal_id, etc.)\n3. Extract entity names for search when IDs unavailable\n4. Understand context_needed - what specifically is being asked\n5. List all tasks that need context\n```\n\n### Phase 2: Search Archive (ALWAYS FIRST)\n\n**Archive Search Strategy**:\n\n```\n1. If project_id available: Use \"Read Entity Knowledge Base\" with project_id\n2. If goal_id available: Use \"Read Entity Knowledge Base\" with goal_id\n3. If task_id available: Use \"Read Entity Knowledge Base\" with task_id\n4. If only names available: Use \"List Goals for Project\" or \"List Tasks for Goal\" to find IDs, then search\n5. Analyze returned knowledge base entries for relevance\n```\n\n**What to Look For in Archive**:\n- Project descriptions and status\n- Recent notes or updates mentioning the tasks/goals\n- Related documentation or decisions\n- Prerequisites or dependencies documented\n- Best practices or guidelines specific to this project\n\n**Archive Search Tools Available**:\n- **Read Entity Knowledge Base**: Get all KB entries linked to a project/goal/task ID\n- **Read Project Details**: Get project metadata\n- **List Goals for Project**: Find goals and their IDs\n- **List Tasks for Goal**: Find tasks and their IDs\n- **Get Goal Details**: Get specific goal information\n- **Get Task Details**: Get specific task information\n\n### Phase 3: Evaluate Archive Results\n\n```\nAfter searching archive, ask:\n1. Did I find relevant context for the project?\n2. Did I find specific guidance for the tasks?\n3. Are there clear instructions, decisions, or background info?\n4. Is the information sufficient to provide actionable context?\n```\n\n**Archive Sufficient** → Proceed to Phase 5 (Synthesize Response)\n**Archive Insufficient** → Proceed to Phase 4 (Research)\n\n### Phase 4: Conduct Research (When Archive Insufficient)\n\n**Research Trigger Conditions**:\n- ✅ Archive has NO relevant entries\n- ✅ Archive has outdated information (check dates)\n- ✅ Task requires current best practices or tool-specific guidance\n- ✅ Task involves technologies/frameworks not documented in archive\n- ✅ context_needed explicitly asks for current/updated information\n- ✅ Task requires domain expertise not present in archive\n\n**DO NOT Research When**:\n- ❌ Archive has recent, relevant, detailed context\n- ❌ Task is project-specific and archive explains the project approach\n- ❌ Information is company/personal process that won't be found via web search\n\n**Research Strategy**:\n\n```\n1. Formulate focused Perplexity query based on:\n   - Task names and descriptions\n   - Specific technologies/frameworks mentioned\n   - context_needed field\n   - Gaps in archive knowledge\n\n2. Use \"Message a model in Perplexity\" tool\n3. Analyze research results for:\n   - Best practices and guidelines\n   - Tool/framework recommendations\n   - Common pitfalls and solutions\n   - Prerequisites and dependencies\n   - Current standards (2025)\n\n4. Extract citations from Perplexity response\n```\n\n**Example Research Queries**:\n- \"Best practices for [technology/framework] in 2025\"\n- \"How to [specific task] using [tool] - step by step guide\"\n- \"Common mistakes when [task description] and how to avoid them\"\n- \"[Framework] prerequisites and setup requirements\"\n\n### Phase 5: Synthesize Response\n\n**Combining Archive + Research**:\n\n```\n1. Project Context:\n   - Use archive for project-specific summary\n   - Add recent developments from archive\n   - Include key decisions from archive\n   - Supplement with research if archive is sparse\n\n2. Task Contexts (one per task):\n   - Start with archive-specific guidance if available\n   - Add research-based best practices\n   - Combine into coherent 1-2 paragraph \"context\"\n   - Extract \"related_knowledge\" from both sources\n   - List \"prerequisites\" from both sources\n   - Provide \"tips\" mixing archive wisdom + research insights\n\n3. Citations:\n   - Include ALL URLs from Perplexity research\n   - Add proper title and relevance explanation\n   - Format exactly as specified\n\n4. Recommendations:\n   - Synthesize actionable recommendations\n   - Prioritize by impact and relevance\n   - Mix project-specific + general best practices\n```\n\n**Field-by-Field Requirements**:\n\n| Field | Required | Source | Guidelines |\n|-------|----------|--------|------------|\n| `request_id` | Yes | Copy from request | Must match exactly |\n| `context_found` | Yes | Your assessment | `true` if any useful context found, `false` otherwise |\n| `source` | Yes | Your workflow | `memory`, `archive`, `research`, `both`, or `none` |\n| `project_context.summary` | Yes | Archive + Research | 2-3 sentences maximum |\n| `project_context.recent_developments` | Yes | Primarily archive | Empty array if none found |\n| `project_context.key_decisions` | Yes | Primarily archive | Empty array if none found |\n| `task_contexts` | Yes | Archive + Research | One object per task in request |\n| `task_contexts[].context` | Yes | Archive + Research | 1-2 paragraphs, actionable |\n| `task_contexts[].related_knowledge` | Yes | Archive + Research | 2-5 items, empty array if none |\n| `task_contexts[].prerequisites` | Yes | Archive + Research | 1-5 items, empty array if none |\n| `task_contexts[].tips` | Yes | Archive + Research | 2-5 items, empty array if none |\n| `research_conducted` | Yes | Your workflow | `true` if Perplexity used, `false` otherwise |\n| `citations` | If research | Perplexity output | Required if `research_conducted: true` |\n| `recommendations` | Yes | Archive + Research | 2-5 items, empty array if none |\n\n### Phase 6: Return Response\n\n```\n1. Validate JSON structure matches required format\n2. Ensure request_id matches\n3. Ensure all required fields present\n4. Return complete JSON response\n```\n\n## Tool Usage Guidelines\n\n### Archive Search Tools (Use First, Always)\n\n**Read Entity Knowledge Base**:\n```\nPurpose: Get all knowledge base entries linked to an entity\nWhen: You have a project_id, goal_id, or task_id\nInput: entity_id (UUID)\nReturns: All KB entries with content, summaries, citations\n```\n\n**Read Project Details**:\n```\nPurpose: Get project metadata and status\nWhen: You have project_id or need to find project by name\nInput: project_id (UUID)\nReturns: Project name, description, status, dates, flags\n```\n\n**List Goals for Project**:\n```\nPurpose: Get all goals for a project\nWhen: You have project_id but need goal information\nInput: project_id (UUID)\nReturns: Goals with IDs, names, descriptions, success criteria\n```\n\n**Get Goal Details**:\n```\nPurpose: Get specific goal information\nWhen: You have goal_id\nInput: goal_id (UUID)\nReturns: Complete goal information including task children\n```\n\n**List Tasks for Goal**:\n```\nPurpose: Get all tasks for a goal\nWhen: You have goal_id but need task details\nInput: goal_id (UUID)\nReturns: Tasks with full details including dependencies\n```\n\n**Get Task Details**:\n```\nPurpose: Get specific task information\nWhen: You have task_id\nInput: task_id (UUID)\nReturns: Complete task information including dependencies\n```\n\n### Research Tool (Use After Archive Search)\n\n**Message a model in Perplexity**:\n```\nPurpose: Conduct web research for current information\nWhen: Archive insufficient or context_needed requires current knowledge\nInput: Focused query string\nReturns: Research findings with sources/URLs\nBest Practices:\n- Make queries specific and focused\n- Include year (2025) when currency matters\n- Ask for best practices, guides, or step-by-step approaches\n- Request comparison of approaches when multiple options exist\n```\n\n## Decision Tree\n\n```\n┌─────────────────────────┐\n│   Receive Request       │\n└──────────┬──────────────┘\n           │\n           ▼\n┌─────────────────────────┐\n│ Extract session_id      │\n└──────────┬──────────────┘\n           │\n           ▼\n      ╔═══════╗\n      ║ Check ║\n      ║ Chat  ║───Found───┐\n      ║History║           │\n      ╚═══╤═══╝           │\n          │Not Found      │\n          │               ▼\n          │      ╔════════════╗\n          │      ║  Context   ║\n          │      ║  Still     ║──Yes──┐\n          │      ║ Relevant?  ║       │\n          │      ╚══════╤═════╝       │\n          │             │No           │\n          ▼             ▼             ▼\n┌─────────────────────────┐  ┌───────────────┐\n│ Extract IDs & Names     │  │  Synthesize   │\n└──────────┬──────────────┘  │  Response     │\n           │                 │  from Memory  │\n           ▼                 └───────┬───────┘\n┌─────────────────────────┐         │\n│ Search Archive with IDs │         │\n│ or Names                │         │\n└──────────┬──────────────┘         │\n           │                        │\n           ▼                        │\n      ╔═══════╗                    │\n      ║ Found ║                    │\n      ║ Good  ║───Yes───┐          │\n      ║ Info? ║         │          │\n      ╚═══╤═══╝         │          │\n          │No           │          │\n          │             │          │\n          ▼             ▼          │\n┌──────────────┐  ┌────────────┐  │\n│   Research   │  │ Synthesize │  │\n│ with         │  │ Response   │  │\n│ Perplexity   │  │ (Archive)  │  │\n└──────┬───────┘  └─────┬──────┘  │\n       │                │         │\n       │                │         │\n       └────────┬───────┘         │\n                │                 │\n                ▼                 │\n       ┌────────────────┐         │\n       │  Synthesize    │         │\n       │  Response      │         │\n       │ (Archive +     │         │\n       │  Research)     │         │\n       └────────┬───────┘         │\n                │                 │\n                └────────┬────────┘\n                         │\n                         ▼\n                ┌────────────────┐\n                │  Return JSON   │\n                └────────────────┘\n```\n\n## Quality Standards\n\n### Context Quality\n- ✅ **Good**: Specific to the task, actionable, includes prerequisites and tips\n- ❌ **Bad**: Generic advice, obvious statements, no actionable guidance\n\n### Archive Search Thoroughness\n- ✅ **Good**: Searched by IDs when available, checked multiple entity types\n- ❌ **Bad**: Only searched one entity type, missed relevant connections\n\n### Research Necessity\n- ✅ **Good**: Researched when archive truly insufficient, avoided when archive adequate\n- ❌ **Bad**: Always researching without checking archive, or never researching when needed\n\n### Citation Formatting\n- ✅ **Good**: Every research source included with title, URL, relevance\n- ❌ **Bad**: Missing sources, broken URLs, no relevance explanation\n\n### Response Completeness\n- ✅ **Good**: All required fields present, arrays populated or empty (not null)\n- ❌ **Bad**: Missing fields, null values where arrays expected, invalid JSON\n\n## Examples\n\n### Example 0: Session Memory (No Archive or Research Needed)\n\n**Request 1** (session_id: \"2025-10-10T21:09:05.795-04:00\"):\nContext for \"Learn Acoustic Guitar Basics\" project\n\n**Workflow 1**:\n1. Check memory - no previous requests found\n2. Search archive - minimal info\n3. Research with Perplexity - get guitar learning best practices\n4. Return response with `source: \"research\"`\n\n**Request 2** (same session_id: \"2025-10-10T21:09:05.795-04:00\"):\nContext for next task \"Practice posture\" in same project\n\n**Workflow 2**:\n1. Check memory - FOUND previous request with same session_id!\n2. Review: Previously researched guitar learning, same project\n3. Context still relevant - can reuse guitar learning fundamentals\n4. Skip archive and research - respond from memory\n\n**Response 2**:\n```json\n{\n  \"request_id\": \"req-2025-10-10T21:09:05.795-04:00-002\",\n  \"context_found\": true,\n  \"source\": \"memory\",\n  \"project_context\": {\n    \"summary\": \"Beginner guitar learning focusing on foundational techniques. (Continuing from earlier in this session - same project as previous workblock.)\",\n    \"recent_developments\": [],\n    \"key_decisions\": [\"Prioritize technique quality over speed\"]\n  },\n  \"task_contexts\": [\n    {\n      \"task_id\": null,\n      \"task_name\": \"Practice posture\",\n      \"context\": \"Building on the fundamentals from your previous task, proper posture is critical...\",\n      \"prerequisites\": [\"Have guitar accessible\", \"Mirror for posture checking\"],\n      \"tips\": [\"Reference notes from previous viewing task\", \"Practice in short intervals\"]\n    }\n  ],\n  \"research_conducted\": false,\n  \"citations\": [],\n  \"recommendations\": [\"Build on momentum from previous task\", \"15-minute practice sessions\"]\n}\n```\n\n### Example 1: Archive Sufficient (No Research)\n\n**Request**: Context for \"Refactor authentication middleware for Project Phoenix\"\n\n**Workflow**:\n1. Search archive with project_id for \"Project Phoenix\"\n2. Find detailed architecture docs, recent decision to use JWT\n3. Find task-specific notes about middleware patterns\n4. Archive has everything needed\n\n**Response**:\n```json\n{\n  \"request_id\": \"req-abc-001\",\n  \"context_found\": true,\n  \"source\": \"archive\",\n  \"project_context\": {\n    \"summary\": \"Project Phoenix is a microservices API rewrite focusing on modern auth patterns. JWT-based authentication was selected in Phase 1 design review.\",\n    \"recent_developments\": [\n      \"Completed Phase 1 architecture design (2025-09-15)\",\n      \"Selected Auth0 for identity management integration\"\n    ],\n    \"key_decisions\": [\n      \"Use JWT tokens with 15-minute expiry and refresh token pattern\",\n      \"Implement role-based access control (RBAC) from start\"\n    ]\n  },\n  \"task_contexts\": [...],\n  \"research_conducted\": false,\n  \"citations\": [],\n  \"recommendations\": [...]\n}\n```\n\n### Example 2: Archive + Research (Both Sources)\n\n**Request**: Context for \"Learn React Server Components best practices\"\n\n**Workflow**:\n1. Search archive with project_id\n2. Find project uses React but no RSC-specific documentation\n3. Research RSC best practices with Perplexity (current 2025 patterns)\n4. Combine project React context + RSC research\n\n**Response**:\n```json\n{\n  \"request_id\": \"req-def-002\",\n  \"context_found\": true,\n  \"source\": \"both\",\n  \"project_context\": {\n    \"summary\": \"Learn Acoustic Guitar project follows structured learning with emphasis on proper technique from the start. This is a personal skill development project with no prior guitar experience.\",\n    \"recent_developments\": [\n      \"Started JustinGuitar beginner curriculum\",\n      \"Week 1 focus on fundamentals\"\n    ],\n    \"key_decisions\": [\n      \"Use JustinGuitar as primary learning resource\",\n      \"Prioritize technique quality over speed\"\n    ]\n  },\n  \"task_contexts\": [\n    {\n      \"task_id\": \"abc123\",\n      \"task_name\": \"Watch JustinGuitar videos 1-3\",\n      \"context\": \"JustinGuitar's Grade 1 Module 1 covers essential fundamentals. Videos 1-3 specifically address guitar anatomy, holding positions, and initial finger placement. Research shows JustinGuitar has taught over 1 million students with proven gradual progression. Proper posture from the start prevents back/wrist strain later.\",\n      \"related_knowledge\": [\n        \"JustinGuitar structured approach proven effective for beginners\",\n        \"Grade 1 typically takes 2-3 months for most students\"\n      ],\n      \"prerequisites\": [\n        \"Have guitar accessible during videos\",\n        \"Quiet environment for focused learning\"\n      ],\n      \"tips\": [\n        \"Take written notes on posture checkpoints for future reference\",\n        \"Pause and rewind liberally - foundational concepts are critical\",\n        \"Don't skip ahead even if concepts seem simple\"\n      ]\n    }\n  ],\n  \"research_conducted\": true,\n  \"citations\": [\n    {\n      \"title\": \"JustinGuitar Beginner Course - Grade 1 Overview\",\n      \"url\": \"https://www.justinguitar.com/classes/beginner-guitar-course-grade-one\",\n      \"relevance\": \"Official source for course structure and module breakdown\"\n    },\n    {\n      \"title\": \"Guitar Learning Timeline - What to Expect as a Beginner\",\n      \"url\": \"https://www.guitarworld.com/lessons/how-long-does-it-take-to-learn-guitar\",\n      \"relevance\": \"Research-backed timeline for beginner guitar skill development\"\n    }\n  ],\n  \"recommendations\": [\n    \"Plan for 5-10 minutes of tuning practice after videos to reinforce concepts\",\n    \"Create a posture checklist from video notes\",\n    \"Keep practice sessions short (20-30 min) but consistent in early weeks\"\n  ]\n}\n```\n\n### Example 3: No Context Found\n\n**Request**: Context for very project-specific internal task with no archive entries\n\n**Workflow**:\n1. Search archive with project_id - no entries found\n2. Task is internal company process - research won't help\n3. Return honest \"no context found\" response\n\n**Response**:\n```json\n{\n  \"request_id\": \"req-ghi-003\",\n  \"context_found\": false,\n  \"source\": \"none\",\n  \"project_context\": {\n    \"summary\": \"No project context available in archive. This may be a new project or internal process not yet documented.\",\n    \"recent_developments\": [],\n    \"key_decisions\": []\n  },\n  \"task_contexts\": [\n    {\n      \"task_id\": \"xyz789\",\n      \"task_name\": \"Complete Q4 expense reports\",\n      \"context\": \"No specific context available for this task. This appears to be an internal administrative process. Please proceed with standard company procedures or consult relevant documentation.\",\n      \"related_knowledge\": [],\n      \"prerequisites\": [],\n      \"tips\": []\n    }\n  ],\n  \"research_conducted\": false,\n  \"citations\": [],\n  \"recommendations\": []\n}\n```\n\n## Error Handling\n\n### Missing IDs in Request\n**Action**: Use entity names to search; use List/Get tools to find IDs if needed\n**Fallback**: Search by name matching in KB entries if ID lookup fails\n\n### Archive Tools Return Empty\n**Action**: Note in internal log; proceed to research phase\n**Response**: Set `source: \"research\"` if research conducted\n\n### Perplexity Research Fails\n**Action**: Return archive-only response if available\n**Response**: Set `research_conducted: false`, include note in context if archive also empty\n\n### Invalid JSON in Request\n**Action**: Parse best-effort; use available fields\n**Response**: Still return valid JSON response with whatever context you can provide\n\n## Success Metrics\n\nYou're successful when:\n1. ✅ **Memory checked FIRST** - Always look for session_id in chat history before archive/research\n2. ✅ Previous context reused when appropriate within same session\n3. ✅ Archive searched thoroughly before researching (if memory insufficient)\n4. ✅ Research conducted only when memory and archive insufficient\n5. ✅ Response JSON perfectly matches required format\n6. ✅ Context is specific, actionable, and relevant\n7. ✅ Citations included when research performed\n8. ✅ Empty arrays used instead of null values\n9. ✅ request_id matches between request and response\n10. ✅ Task-specific context provided for each task\n11. ✅ Recommendations are actionable and prioritized\n12. ✅ Response completeness maintained even when context is limited\n13. ✅ Source field correctly indicates `memory`, `archive`, `research`, `both`, or `none`\n\n---\n\n**TL;DR**: You're a tool/service with session memory that receives structured requests. **ALWAYS check chat history for session_id FIRST**, reuse context when appropriate, search archive second, research third, and return structured JSON responses with context, tips, and citations. Memory-first. Archive-second. Research-last. Always return complete JSON. Never ask follow-up questions.\n",
          "maxIterations": 30
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2160,
        -112
      ],
      "id": "53cc2794-71c6-4ae4-8028-98f8be11eade",
      "name": "Archivist Agent (Tool Responder)"
    },
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n  \"request_id\": \"req-2025-10-10-001\",\n  \"sessionId\" : \"9849-98456fdawe-sdfa684\",\n  \"workblock\": {\n    \"project\": \"Learn Acoustic Guitar Basics\",\n    \"project_id\": \"proj-12345-uuid\",\n    \"goal\": \"Complete Beginner Foundation\",\n    \"goal_id\": \"goal-67890-uuid\",\n    \"milestone\": \"Week 1 - Setup and Posture\",\n    \"milestone_id\": \"milestone-11111-uuid\"\n  },\n  \"tasks\": [\n    {\n      \"task_id\": \"1243d929-e1df-49ea-bd8b-d05372ef667c\",\n      \"name\": \"Watch JustinGuitar Beginner Course videos 1-3\",\n      \"description\": \"Watch the first three videos from JustinGuitar's Beginner Course focusing on guitar setup, proper holding posture, and basic tuning techniques. Take notes on key posture points and tuning methods.\",\n      \"estimated_minutes\": 120,\n      \"priority_score\": 3,\n      \"task_type\": \"Research\"\n    },\n    {\n      \"task_id\": \"926d84cd-199f-405d-8dc0-a1a504472993\",\n      \"name\": \"Practice guitar tuning with tuner app\",\n      \"description\": \"Download a free guitar tuner app (GuitarTuna or similar) and practice tuning the guitar to standard EADGBE tuning. Learn to identify when strings are sharp or flat.\",\n      \"estimated_minutes\": 60,\n      \"priority_score\": 3,\n      \"task_type\": \"Develop\"\n    }\n  ],\n  \"context_needed\": \"Need guidance on best practices for complete beginners learning guitar - specifically around JustinGuitar course structure, recommended tuner apps, and common mistakes to avoid during initial learning phase.\"\n}"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        1696,
        -112
      ],
      "id": "e5ddd04a-a1a3-4ae5-ae41-9e41ec7a9536",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "model": "x-ai/grok-4-fast",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1216,
        272
      ],
      "id": "a6139441-9b27-4e8b-b64f-385ac1b0b645",
      "name": "x-ai/grok-4-fast:paid",
      "credentials": {
        "openRouterApi": {
          "id": "{{$env.OPENROUTER_ACCOUNT_CREDENTIAL_ID_2}}",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId }}",
        "sessionTTL": 86400,
        "contextWindowLength": 15
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        1216,
        432
      ],
      "id": "152bb002-d448-4352-9b03-4dbd58fc43e0",
      "name": "Redis Chat Memory",
      "credentials": {
        "redis": {
          "id": "{{$env.REDIS_ACCOUNT_CREDENTIAL_ID_3}}",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "435114dd-0ead-4e0e-aad9-398de42796ec",
              "name": "chatInput",
              "value": "={{ JSON.stringify($input.all(), null, 2) }}",
              "type": "string"
            },
            {
              "id": "1eba9c68-335b-40aa-9669-d751f9ae915c",
              "name": "sessionId",
              "value": "={{ $json.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1920,
        -112
      ],
      "id": "ae4fc965-4f40-400a-ac51-b6ad100d9d0c",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "content": "# Conversational Archvivist",
        "height": 256,
        "width": 1056,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        368,
        -192
      ],
      "typeVersion": 1,
      "id": "1e2c4474-50df-4db7-bbc8-7f90c9d17321",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Batch Request Archivist",
        "height": 256,
        "width": 896,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1632,
        -192
      ],
      "typeVersion": 1,
      "id": "39157a50-5edb-46bb-8505-cd6a1bbc5e0c",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Agentic Tool Set:\n- Access to Project Data\n- Access to Knowledge Base\n- Access to Perplexity for doing online research",
        "height": 368,
        "width": 1520
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        848,
        224
      ],
      "typeVersion": 1,
      "id": "b86cbe29-9799-4738-833e-484080171013",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "request_id": "req-2025-10-11T00:47:52.062-04:00-004",
          "sessionId": "2025-10-11T00:47:52.062-04:00",
          "workblock": {
            "project": "Learn Acoustic Guitar Basics",
            "project_id": "8cabba58-52fc-4bc1-b615-04de510dc0b0",
            "goal": "Week 1: Guitar Setup and Basic Tuning",
            "goal_id": "ffed7e61-8fd1-41b6-b2a9-f9e28abaa9fa",
            "milestone": null,
            "milestone_id": null
          },
          "tasks": [
            {
              "task_id": "95db9426-ddad-4066-b7d2-999b00e5d89e",
              "name": "Practice guitar tuning with tuner app",
              "description": "Download a free guitar tuner app (GuitarTuna or similar) and practice tuning the guitar to standard EADGBE tuning. Learn to identify when strings are sharp or flat.",
              "estimated_minutes": 60,
              "priority_score": 3,
              "task_type": "Develop"
            }
          ],
          "context_needed": "Guidance on best tuner apps for beginners, step-by-step process for tuning acoustic guitar to standard EADGBE, tips for identifying sharp/flat strings, common beginner mistakes in tuning, and how this builds on video learning in Week 1."
        }
      }
    ]
  },
  "connections": {
    "Message a model in Perplexity": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Read Project Details": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Link Knowledge Base to Project": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Knowledge Base Entry": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Link Knowledge Base to Goal": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "List Goals for Project": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Goal Details": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "List Tasks for Goal": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Task Details": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create New Task": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Task": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Task": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add Task Dependency": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Remove Task Dependency": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Link Knowledge Base to Task": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Query Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Projects": {
      "main": [
        [
          {
            "node": "Reformat Project List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reformat Project List": {
      "main": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Entity Knowledge Base": {
      "ai_tool": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "x-ai/grok-4-fast:paid": {
      "ai_languageModel": [
        [
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Archivist Agent (Conversational)",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Archivist Agent (Tool Responder)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "08facd4a-5af1-4471-ab5a-b9397ac4737b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "{{$env.N8N_INSTANCE_ID}}"
  },
  "id": "mXh8sZFcUaWKEBYU",
  "tags": []
}